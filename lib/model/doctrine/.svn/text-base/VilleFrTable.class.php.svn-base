<?php

/**
 * VilleFrTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class VilleFrTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object VilleFrTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('VilleFr');
    }

    /*
     * récupération des informations liée à une ville 
     * dont le nom et le cp sont concaténés et passés en argument
     * en sortie : un unique enregistrement de ville en tableau
     * $libelle : Lyon (69000)
     * la récupération de la donnée se fait sous forme => $maVille[0]['id_ville']
     */

    public static function infoVilleCpLibelle($cp = null, $ville = null) {

        if (is_null($cp) || is_null($ville)) {
            return null;
        }

        $query = Doctrine_Query::create()
                ->from('VilleFr v')

        ;
        
        //formatte le nom de la ville (sans accent, en majuscule  et sans tiret
        $outil = new Util();
        
        $nomVille = $outil->transformeEtUpperVille($ville);
               

        if ($cp != "") {
            $query->andWhere('v.code_postal = ?', $cp);
        }

        if ($ville != "") {
            $query->andWhere('v.nom_ville = ?', $nomVille);
        }

        $chaineExtract = '';


        return $query->fetchArray();
        //return $query->getSqlQuery();
    }
    
    

    /*
     * récupération de l'id d'une ville lorsque le nom est passe en argument
     */

    public static function getIdVille($libelle) {
        if (is_null($libelle)) {
            return null;
        }

        $Ville = Doctrine_Query::create()
                ->from('VilleFr v')
                ->where('UPPER(v.nom_ville) = UPPER(?)', $libelle)
                ->fetchArray()
        ;
        
        $idVille = $Ville[0]['id_ville'];



        return $idVille;
    }

    /*
     * récupération de l'id d'une ville lorsque le nom est passe en argument
     * ainsi que le code postal
     */

    public static function getIdVilleCp($ville = null, $cp = null) {
        if (is_null($ville) && is_null($cp)) {
            return null;
        }

        $q = Doctrine_Query::create()
                ->from('VilleFr v')
                //->where('UPPER(v.nom_ville) = UPPER(?)', $ville)
                //->andWhere('v.code_postal = ?',$cp)
                //->fetchArray()
        ;

        if(!is_null($ville) && $ville != ''){
            $outil = new Util();
            $newVille = $outil->extractCpLibelle($ville);
            $tabVille = array();
            $tabVille = $outil->recupCpLibelle($ville);

            //$q->addWhere('UPPER(v.nom_ville) = UPPER(?)', $newVille);
            $q->addWhere('UPPER(v.nom_ville) = UPPER(?)', $tabVille['ville']);


            //filtrage en fonction du code postal
            if(!is_null($tabVille['cp']) && $tabVille['cp'] != ''){
                $q->addWhere('v.code_postal = ?',$tabVille['cp']);
            }else{
                if(!is_null($cp) && $cp != ''){
                //suppression du 0 initiale dans le cp si présent
                //$outil = new Util();
                //$newCp = $outil->suppZeroDevantCp($cp);

                //$q->addWhere('v.code_postal = ?',$newCp);
                $q->addWhere('v.code_postal = ?',$cp);
                }
            }

        }else{
            if(!is_null($cp) && $cp != ''){
            //suppression du 0 initiale dans le cp si présent
            //$outil = new Util();
            //$newCp = $outil->suppZeroDevantCp($cp);

            //$q->addWhere('v.code_postal = ?',$newCp);
            $q->addWhere('v.code_postal = ?',$cp);
            }else{
                return null;
            }
        }

        

        $Ville = $q->fetchArray();

        $idVille = $Ville[0]['id_ville'];



        return $idVille;
    }
    
    /*
     * récupération du libelle d'une ville lorsque 
     * la ville est passée sous forme fr-56000 (fr suivi de id)
     * @param   string  $libId      argument sous de initiale pays et id ville (ex :fr-12152)
     * @return  string  $nomVille   nom de la ville  
     */

    public static function getNomVilleFromFrId($libId) {
        $nomVille = '';
        $id = null;
        
        if (is_null($libId)) {
            return null;
        }
        
        //extraction du fr- et récupération de l'id
        $outil = new Util();
        $id = $outil->extractIdVille($libId);
        
        if (is_null($id)) {
            return null;
        }
        
        $maVille = Doctrine_Core::getTable('VilleFr')->find($id);

        
        $nomVille = $maVille->getNomVille();

        return $nomVille;
    }
    
        /*
     * récupération d'un objet ville lorsque 
     * la ville est passée sous forme fr-56000 (fr suivi de id)
     * @param   string  $libId      argument sous de initiale pays et id ville (ex :fr-12152)
     * @return  obj  $Ville
     */

    public static function getVilleFromFrId($libId) {
        $ville = new VilleFr();
        $id = null;
        
        if (is_null($libId)) {
            return null;
        }
        
        //extraction du fr- et récupération de l'id
        $outil = new Util();
        $id = $outil->extractIdVille($libId);
        
        if (is_null($id)) {
            return null;
        }
        
        $ville = Doctrine_Core::getTable('VilleFr')->find($id);

        
        return $ville;
    }
    
    /*
     * récupération d'un tableau des code Insee des villes à partir des id des villes fournies
     * @param   array  $tabId       tableau des id des ville
     * @return  array  $tabId     tableau des code Insee des villes
     */

    public static function getTabCdInsee($tabId) {
        if (is_null($tabId) || count($tabId) == 0) {
            return null;
        }

        $Villes = Doctrine_Query::create()
                ->from('VilleFr v')
                ->whereIn('v.id_ville', $tabId)
                ->fetchArray()
        ;

        $tabId = array();

        foreach($Villes as $Ville){
            $tabId[] = $Ville['code_insee'];
        }

        return $tabId;
    }

}