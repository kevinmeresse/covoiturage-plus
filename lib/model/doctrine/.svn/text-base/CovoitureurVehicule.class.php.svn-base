<?php

/**
 * CovoitureurVehicule
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    roulezmailn_v3
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class CovoitureurVehicule extends BaseCovoitureurVehicule {
    
    public function __toString() {
        return $this->getVehiculeMarque()->getNomMarque()." - ".$this->getVehiculeModele()->getNomModele();
    }
    
    /*
     * fonction de récupération de la liste des véhicules
     * d'un covoitureur
     */

    public static function getListeVehicule($id_utilisateur = null) {
        if ($id_utilisateur != 0) {
            $q = Doctrine_Query::create()
                    ->from('CovoitureurVehicule cv')
                    ->where('cv.id_utilisateur=?', $id_utilisateur);

            return $q->execute();
        } else {
            $q = Doctrine_Query::create()
                    ->select('0');

            return $q->execute();
        }
    }

    /*
     * fonction de récupération de la marque et du modèle pour
     * un véhicule donné
     */

    public function getCovoitVehicule() {
        return $this->getVehiculeMarque()->getNomMarque() . " - " . $this->getVehiculeModele()->getNomModele();
    }

    //modification de la fonction save pour update
    public function save(Doctrine_Connection $conn = null) {

        if (!$this->getCle()) {
            $cle = new Util();
            $this->setCle($cle->genereCle('', ''));
        }

        if (!$this->getDateCreation()) {
            $this->setDateCreation(date("Y-m-d H:m:s"));
        }


        return parent::save($conn);
    }

    /*
     * fonction de vérification d'existence d'un véhicule pour un covoituteur
     * et retourne l'id si il existe, sinon le crée
     * un véhicule donné
     * retourne l'id_vehicule 
     */

    public function getCovoitVehiculeId($marque = null, $modele = null, $covoitureur = null) {
        if ($marque == null || $modele == null || $covoitureur == null) {
            return 0;
        } else {
            
            $covoit_vehicule = Doctrine_Query::create()
                    ->from('CovoitureurVehicule cv')
                    ->where('cv.id_utilisateur = ?', $covoitureur)
                    ->andWhere('cv.id_marque = ?', $marque)
                    ->andWhere('cv.id_modele = ?', $modele)
                    ->fetchOne()
            ;
            return $covoit_vehicule['id_vehicule'];
            
            /*
            $this->setIdMarque($marque);
                $this->setIdModele($modele);
                $this->setIdUtilisateur($covoitureur);
                $this->save();
                return $this->getIdVehicule();
            //return count($covoit_vehicule);
            if(count($covoit_vehicule) != 0){//le vehicule existe deja
                return $covoit_vehicule->getIdVehicule();
            }else{
                $this->setIdMarque($marque);
                $this->setIdModele($modele);
                $this->setIdUtilisateur($covoitureur);
                $this->save();
                return $this->getIdVehicule();
            }
             * 
             */
        }
    }

    /*
     * enregistre un nouveau modele
     */
    public function setCovoitVehiculeId($marque = null, $modele = null, $covoitureur = null) {
        if ($marque == null || $modele == null || $covoitureur == null) {
            return 0;
        } else {
            //vérification que le véhicule n'existe pas pour le covoitureur
            $id_vehicule = Doctrine_Core::getTable('CovoitureurVehicule')->getCovoitureurVehicule($covoitureur, $marque, $modele);
            if($id_vehicule == 0){//n'existe pas pour le covoitueur
                $now = date("Y-m-d H:i:s");
                $this->setIdMarque($marque);
                $this->setIdModele($modele);
                $this->setIdUtilisateur($covoitureur);
                $this->setDateCreation($now);
                $this->setEtat(1);
                $this->save();
                return $this->getIdVehicule();
            }else{ // existe deja pour le covoitureur
                return $id_vehicule;
            }
            
            
        }
    }
}
