<?php

/**
 * Covoitureur
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    roulezmailn_v3
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Covoitureur extends BaseCovoitureur {

    public function getSlug() {
        return Covoitureur::slugify($this->getName());
    }

    public function __toString() {
        return $this->getNom()." ".$this->getPrenom();
    }
    
    /*
     * afficha la date de naissance avec NP quand non définie
     */
    public function getAfficheDateNaissance() {
        if(is_null($this->getDateNaissance())){
            return "NP";
        }else{
            return date("Y", strtotime($this->getDateNaissance()));
            
        }

    }
    
    /*
     * méthode qui donne l'id"ntité prénom et premiere lettre du nom
     */
    public function getIdentiteReduiteNom() {
        return ucfirst($this->getPrenom())." ".ucfirst(substr($this->getNom(), 0, 1)).".";
    }
    
    /*
     * méthode qui donne l'identité (prénom et premiere lettre du nom) ainsi que l'entreprise
     */
    public function getIdentiteReduiteEtEntreprise() {
        $result = ucfirst($this->getPrenom())." ".ucfirst(substr($this->getNom(), 0, 1)).".";
        if ($this->getSociete() != null && $this->getSociete() != '') {
            $result .= " (".ucfirst($this->getSociete()).")";
        }
        return $result;
    }

    /*
     * récupération des enregistrements de covoituerur à partir
     * des lettres de départ
     */

    public function getAutocomplete($value) {
//Doctrine_Manager::getInstance()->bindComponent('Equipage', 'dbrmv3');
        //récupération des enregistrements
        $covoitureurs = Doctrine_Query::create()
                ->select('nom, prenom')
                ->from('Covoitureur')
                ->where('nom like \'' . $value . '%\'')
                ->andWhere('id_site_client = ?', sfConfig::get('sf_id_site_client'))
                ->execute();

        $results = "";

        if ($covoitureurs->count() != 0) {

            foreach ($covoitureurs as $covoitureur) {
                $results .= $covoitureur->getNom() . " (" . $covoitureur->getPrenom() . ")\r\n";
            }
        }

        return $results;
    }
    
    
    /*
     * récupération des enregistrements de covoituerur à partir
     * des lettres de départ ave Id
     */

    public function getAutocompleteId($value) {
//Doctrine_Manager::getInstance()->bindComponent('Equipage', 'dbrmv3');
        //récupération des enregistrements
        $covoitureurs = Doctrine_Query::create()
                ->select('nom, prenom, id_utilisateur')
                ->from('Covoitureur')
                ->where('nom like \'' . $value . '%\'')
                ->andWhere('id_site_client = ?', sfConfig::get('sf_id_site_client'))
                ->execute();

        $results = "";

        if ($covoitureurs->count() != 0) {

            foreach ($covoitureurs as $covoitureur) {
                $results .= $covoitureur->getNom() . " " . $covoitureur->getPrenom() . " (id=" . $covoitureur->getIdUtilisateur() . ")\r\n";
            }
        }

        return $results;
    }

    /*
     * récupération du chemin et du nom de la photo d'un covoitureur
     * retourne un string au format
     * "prefixe"_"id"."extension-fichier"
     *
     */

    public function getCheminPhotoCovoitureur() {

        //nom de l'image du covoitureur
        $nom_image = sfConfig::get('sf_photo_covoitureur_prefixe') . $this->getIdUtilisateur() . sfConfig::get('sf_extension_fichier_image');

        //nom du chemin de l'image
        $nom_chemin = sfConfig::get('sf_rep_commun_photo_covoitureur');

        //génération du code d'affichage de l'image
        $affichage = '<img src="'.$nom_chemin .$nom_image.'" title="image covoitureur">';

        return $affichage;
    }
    
    public function getCheminPhotoCovoitureur1() {

        //nom de l'image du covoitureur
        $nom_image = sfConfig::get('sf_photo_covoitureur_prefixe') . $this->getIdUtilisateur() . sfConfig::get('sf_extension_fichier_image');

        //nom du chemin de l'image
        $nom_chemin = sfConfig::get('sf_rep_commun_photo_covoitureur');

        //génération du code d'affichage de l'image
        //$affichage = '<img src="'.$nom_chemin .$nom_image.'" title="image covoitureur">';

        return $nom_chemin .$nom_image;
    }

    
    /*
     * génération du nom de la photo d'un covoitureur
     * retourne un string au format
     * "prefixe"_"id"."extension-fichier"
     *
     */

    public function setCheminPhotoCovoitureur() {

        //nom de l'image du covoitureur
        $nom_image = sfConfig::get('sf_photo_covoitureur_prefixe') . $this->getIdUtilisateur() . sfConfig::get('sf_extension_fichier_image');

            //nom du chemin de l'image
        //$nom_chemin = sfConfig::get('sf_web_dir')."".sfConfig::get('sf_rep_ini_photo_covoitureur');
        $nom_chemin = sfConfig::get('sf_rep_ini_photo_covoitureur');

        return $nom_chemin .$nom_image;
    }
    
    /*
     * suppression de la photo
     *
     */
    public function deletePhotoCovoitureur() {

        //url de l'image du covoitureur
        $url_photo = $this->getCheminPhotoCovoitureur1();

        //suppression de l'image et retour
        //si unlink a fonctionné => retour TRUE
        //si unlink n'a pas fonctionné => retour FALSE
        return(unlink($url_photo));

    }
    
    
    public function setThumbnailPhotoCovoitureur() {

        //nom de l'image du covoitureur
        $nom_image = sfConfig::get('sf_thumb_covoitureur_prefixe') . $this->getIdUtilisateur() . sfConfig::get('sf_extension_fichier_image');

            //nom du chemin de l'image
        //$nom_chemin = sfConfig::get('sf_web_dir')."/".sfConfig::get('sf_rep_thumb_photo_covoitureur');
        $nom_chemin = sfConfig::get('sf_rep_thumb_photo_covoitureur');


        return $nom_chemin .$nom_image;
    }
    
    public function getThumbnailPhotoCovoitureur() {

        //nom de l'image du covoitureur
        //$nom_image = sfConfig::get('sf_thumb_covoitureur_prefixe') . $this->getIdUtilisateur() . sfConfig::get('sf_extension_fichier_image');
        $nom_image = sfConfig::get('sf_photo_covoitureur_prefixe') . $this->getIdUtilisateur() . sfConfig::get('sf_extension_fichier_image');

            //nom du chemin de l'image
        //$nom_chemin = sfConfig::get('sf_rep_thumb_photo_covoitureur_spl');
        $nom_chemin = sfConfig::get('sf_rep_commun_photo_covoitureur');
        //$nom_chemin = sfConfig::get('sf_chemin_base').sfConfig::get('sf_rep_thumb_photo_covoitureur_spl');

        
        
        
        //génération du code d'affichage de l'image
        if($this->getEtatPhoto() == 2){
            $affichage = '<img src="'.$nom_chemin .$nom_image.'" title="image covoitureur" class="photo_valide" >';
        }elseif($this->getEtatPhoto() == 1){
            $affichage = '<img src="'.$nom_chemin .$nom_image.'" title="image covoitureur" class="photo_non_valide" style="border:2px solid red">';
        }else{
            $affichage = '';
        }
        

        return $affichage;
    }
    
    /*
     * suppression du thumbnailde la photo
     *
     */
    public function deleteThumnailPhotoCovoitureur() {

        //url de l'image du covoitureur
        $url_photo = $this->getThumbnailPhotoCovoitureur();

        //suppression de l'image et retour
        //si unlink a fonctionné => retour TRUE
        //si unlink n'a pas fonctionné => retour FALSE
        return(unlink($url_photo));

    }
    
    /*
     * traitement de l'etat photo (changement de l'état 
     *   à partir de l'écran liste des photos
     *
     */
    public function traiteEtatPhotoCovoitureur($etat_photo) {

        //mise à jour de l'etat_photo
        $this->setEtatPhoto($etat_photo);
        $this->save();

        return ;

    }
    
    /*
     * nombre de trajet pour un covoitureur 
     *
     *
     */
    public function getNbTrajetCovoitureur() {

        //rcupération du nombre de trajet pour le covoitureur
        $nb_trajet = Doctrine_Core::getTable('Trajet')->getCovoitureurTrajetNb($this->getIdUtilisateur());

        return $nb_trajet;

    }
    
    /*
     * nombre de trajet Equipagé pour un covoitureur 
     *
     *
     */
    public function getNbTrajetEquipageCovoitureur() {

        //rcupération du nombre de trajet pour le covoitureur
        $nb_trajet = Doctrine_Core::getTable('Trajet')->getCovoitureurTrajetEquipageNb($this->getIdUtilisateur());

        return $nb_trajet;

    }
    
    
    
    /*
     * modification de l'état d'un covoitureur de "actif" à "non actif" 
     *
     *@method integer                  setEtatInactifCovoitureur()               modification de l'état d'un covoitureur de "actif" à "non actif"
     */
    public function setEtatInactifCovoitureur() {

        $this->setEtat(0);
        $this->save();

        return ;

    }
    
    /*
     * retourne la liste des trajets associés au covoitureur
     * 
     */
    public function getListeTrajetsAssocies() {

        //récupération des trajets pour le covoitureur
        if($listeTrajets = Doctrine_Core::getTable('Trajet')->getListeTrajetAssocCovoitureur($this->getIdUtilisateur())){
            return $listeTrajets;
        }else{
            return null;
        }

        

    }


}
