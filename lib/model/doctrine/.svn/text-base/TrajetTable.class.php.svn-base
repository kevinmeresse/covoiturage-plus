<?php

/**
 * TrajetTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class TrajetTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object TrajetTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Trajet');
    }

    /*
     * filtrage des trajets en fonction du site (id_site)
     * 
     * @return query getTrajetSite Retourne les trajets pour le site et dont l'état est actif
     */

    public function getTrajetSite(Doctrine_Query $q = null) {
        if (is_null($q)) {
            $q = Doctrine_Query::create()
                    //->select('t.id_lieu')
                    ->from('Trajet t');
        }
        //$q->andWhere('t.id_type_trajet = 1'); //sélection des trajets réguliers
        $q->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));
        $q->andWhere('t.etat = 1');
        $q->orderBy('t.date_creation DESC');

        return $q;
    }

    //filtrage des trajets en fonction du covoitureur 
    //  l'id covoitureur est en session
    public function getTrajetCovoitureur($id_covoitureur = null) {

        $q = Doctrine_Query::create()
                //->select('t.id_lieu')
                ->from('Trajet t');


        $q->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));
        $q->andWhere('t.id_utilisateur = ?', $id_covoitureur);
        $q->andWhere('t.etat = 1');

        return $q;
    }

    /*
     * méthode permettant de lister les villes situées à n km
     * 
     */

    public function getListeVilleRayon($id_ville = null, $rayon = 0) {

        $q = Doctrine_Query::create()
                ->select('vfr.nom_ville as nom_ville, vfr.code_postal as code_postal, vfd.id_ville_centre')
                ->from('VilleFrDistance vfd')
                ->where('vfd.id_ville_centre = ?', $id_ville)
                ->andWhere('vfd.distance <= ?', $rayon)
                ->innerJoin('vfd.VilleFr vfr')
        ;

        return $q->fetchArray();
    }

    /*
     * méthode permettant de lister les trajets qui correpondent aux villes
     * passées en argument
     */

    public function listing($filtre=null, $tri=" trajet.id_trajet DESC ", $limit = 10, $FoBo = "FO") {

        $results = array();
        $whereCondition = "";
        $condition_villes_date = "";
        $condition_autre = "";
        //Départ
        //création de la requete en fonction du type de formulaire (simple ou avancé)


        /*         * ****************************************** */
        //traitement du formulaire simple => smpl
        /*         * ****************************************** */

        if (!empty($filtre["form_type"]) && $filtre["form_type"] == "smpl") {   //formulaire simple
            $query = Doctrine_Query::create()
                    ->from('Trajet t');
                    if($FoBo == "BO"){
                        $query->where('t.id_site = ?', sfConfig::get('sf_id_site_client')); //sélection des trajets du site (C+)
                    }
            



            //Filtrage des trajets c+
            //$query->where('t.id_site = ?', sfConfig::get('sf_id_site_client'));
            //Gestion aller simple
            if (!empty($filtre["depart_ville"])) {
                $villesTabDepart = $this->getListeVilleRayon($filtre["depart_ville"][0]["id_ville"], 5000);
                $villesCPTab = array();
                $villesNomTab = array();
                foreach ($villesTabDepart as $ville) {
                    $villesNomTab[] = $ville['nom_ville'];
                    $villesCPTab[] = $ville['code_postal'];
                }
                $query->andWhere('( TRUE ');
                $query->andWhere('( TRUE ');
                $query->andWhereIn('t.depart_ville ', $villesNomTab);
                $query->andWhereIn('t.depart_code_postal', $villesCPTab);
                $query->andWhere(' TRUE )');
                $query->orWhereIn('t.etape1_ville ', $villesNomTab);
                $query->orWhereIn('t.etape2_ville ', $villesNomTab);
                $query->orWhereIn('t.etape3_ville ', $villesNomTab);
                $query->orWhereIn('t.etape4_ville ', $villesNomTab);
                $query->orWhereIn('t.etape5_ville ', $villesNomTab);
                $query->andWhere(' TRUE )');
            } elseif ($filtre["all"] == false) {
                $query->andWhere('null');
            }

            if (!empty($filtre["destination_ville"])) {
                $villesTabDestination = $this->getListeVilleRayon($filtre["destination_ville"][0]["id_ville"], 5000);
                $villesCPTab = array();
                $villesNomTab = array();
                foreach ($villesTabDestination as $ville) {
                    $villesNomTab[] = $ville['nom_ville'];
                    $villesCPTab[] = $ville['code_postal'];
                }
                $query->andWhere('( TRUE ');
                $query->andWhere('( TRUE ');
                $query->andWhereIn('t.destination_ville', $villesNomTab);
                $query->andWhereIn('t.destination_code_postal', $villesCPTab);
                $query->andWhere(' TRUE )');
                $query->orWhereIn('t.etape1_ville ', $villesNomTab);
                $query->orWhereIn('t.etape2_ville ', $villesNomTab);
                $query->orWhereIn('t.etape3_ville ', $villesNomTab);
                $query->orWhereIn('t.etape4_ville ', $villesNomTab);
                $query->orWhereIn('t.etape5_ville ', $villesNomTab);
                $query->andWhere(' TRUE )');
            } elseif ($filtre["all"] == false) {
                $query->andWhere('null');
            }



            //Gestion retour
            if (!empty($filtre["depart_ville"])) {
                //$query->andWhere('t.destination_ville=?', $filtre["depart_ville"][0]["nom_ville"]);
            }

            if (!empty($filtre["destination_ville"])) {
                //$query->andWhere('t.depart_ville=?', $filtre["destination_ville"][0]["nom_ville"]);
            }



            $query->andWhere('t.etat = 1 AND t.actif > 0');
            $query->andWhere('t.lundi_etat = 1 OR t.mardi_etat = 1 OR t.mercredi_etat = 1 OR t.jeudi_etat = 1 OR t.vendredi_etat = 1 OR t.samedi_etat = 1 OR t.dimanche_etat = 1 OR (t.jour_unique_date >= CURDATE() OR t.jour_unique_date_retour >= CURDATE())');
            $query->andWhere("t.id_site = 244");
            //$query->andWhere("(t.id_trajet < 2800000 OR (t.id_trajet > 2809088 AND t.id_trajet < 3000000) OR t.id_trajet > 3000150)");
            $query->orderBy(' t.date_creation desc');
            $query->limit($limit);

            return $query;


            /*             * ****************************************** */
            //traitement du formulaire avancé => avnc
            /*             * ****************************************** */
        } else {  //formulaire avancé
            if (!empty($filtre["form_type"]) && $filtre["form_type"] == "avnc") {   //formulaire simple
                $query = DQ::create()
                        ->from('Trajet t');
                if($FoBo == "BO"){
                        $query->where('t.id_site = ?', sfConfig::get('sf_id_site_client')); //sélection des trajets réguliers
                    }

                //Filtrage des trajets c+
                //$query->where('t.id_site = ?', sfConfig::get('sf_id_site_client'));
                //Gestion aller simple
                //Filtrage sur l'etablissement
  
                    
                if (!empty($filtre["id_etablissement"])) {
                    $query->leftJoin('t.Covoitureur c ');
                    $query->andWhere('c.cp_etablissement_id = ?', array($filtre["id_etablissement"]));

                    if (!empty($filtre["horaire_id"])) {
                        $query->andWhere('c.cp_etablissement_horaire_id = ?', array($filtre["horaire_id"]));
                    };
                    if (!empty($filtre["secteur_id"])) {
                        $query->andWhere('c.cp_etablissement_secteur_id = ?', array($filtre["secteur_id"]));
                    };
                };
                
                

                



                //Filtrage sur la ville de départ
                if (!empty($filtre["depart_ville"])) {

                    //Récupération des villes de départs élargies
                    $villesCPTab = array();
                    $villesNomTab = array();
                    if (!empty($filtre["depart_ville_rayon"])) {
                        $villesTabDepart = $this->getListeVilleRayon($filtre["depart_ville"][0]["id_ville"], $filtre["depart_ville_rayon"]);
                        foreach ($villesTabDepart as $ville) {
                            $villesNomTab[] = $ville['nom_ville'];
                            $villesCPTab[] = $ville['code_postal'];
                        }
                    } else {
                        $villesNomTab[] = $filtre["depart_ville"][0]["nom_ville"];
                        $villesCPTab[] = $filtre["depart_ville"][0]["code_postal"];
                    }

                    $query->andWhere('( TRUE ');
                    $query->andWhere('( TRUE ');
                    $query->andWhereIn('t.depart_ville ', $villesNomTab);
                    $query->andWhereIn('t.depart_code_postal', $villesCPTab);
                    $query->andWhere(' TRUE )');
                    $query->orWhereIn('t.etape1_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape2_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape3_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape4_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape5_ville ', $villesNomTab);
                    $query->andWhere(' TRUE )');
                } elseif ($filtre["all"] == false) {
                    $query->andWhere('null');
                }

                //Filtrage sur la ville de destination
                if (!empty($filtre["destination_ville"])) {
                    //Récupération des villes de départs élargies
                    $villesCPTab = array();
                    $villesNomTab = array();
                    if (!empty($filtre["destination_ville_rayon"])) {
                        $villesTabDestination = $this->getListeVilleRayon($filtre["destination_ville"][0]["id_ville"], $filtre["destination_ville_rayon"]);

                        foreach ($villesTabDestination as $ville) {
                            $villesNomTab[] = $ville['nom_ville'];
                            $villesCPTab[] = $ville['code_postal'];
                        }
                    } else {
                        $villesNomTab[] = $filtre["destination_ville"][0]["nom_ville"];
                        $villesCPTab[] = $filtre["destination_ville"][0]["code_postal"];
                    }

                    $query->andWhere('( TRUE ');
                    $query->andWhere('( TRUE ');
                    $query->andWhereIn('t.destination_ville', $villesNomTab);
                    $query->andWhereIn('t.destination_code_postal', $villesCPTab);
                    $query->andWhere(' TRUE )');
                    $query->orWhereIn('t.etape1_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape2_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape3_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape4_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape5_ville ', $villesNomTab);
                    $query->andWhere(' TRUE )');
                } elseif ($filtre["all"] == false) {
                    $query->andWhere('null');
                }

                if (!empty($filtre["depart_autre_lieu"])) {
                    $query->andWhere('t.depart_autre_lieu = ?', array($filtre["depart_autre_lieu"]));
                }
                
                if (!empty($filtre["jour_unique_date"])) {
                    $query->andWhere('t.jour_unique_date = ? or t.jour_unique_date_retour = ?', array($filtre["jour_unique_date"],$filtre["jour_unique_date"]));
                }

                if (!empty($filtre["destination_autre_lieu"])) {
                    $query->andWhere('t.destination_autre_lieu = ?', array($filtre["destination_autre_lieu"]));
                }

                if (!empty($filtre["id_evenement"])) {
                    $query->andWhere('t.id_evenement = ?', array($filtre["id_evenement"]));
                }

                if (!empty($filtre["id_type_trajet"])) {
                    $query->andWhere('t.id_type_trajet = ?', array($filtre["id_type_trajet"]));
                }else{
                    $query->andWhere('(t.id_type_trajet = 1 or t.id_type_trajet = 2 or t.id_type_trajet = 3)');
                }
                
                if (!empty($filtre["type_cov"]) and $filtre["type_cov"] != "0") {
                    $query->andWhere('t.jour_unique_type_cov = 0 OR t.jour_unique_type_cov = ?
                                OR t.lundi_type_cov = 0 OR t.lundi_type_cov = ? 
                                OR t.mardi_type_cov = 0 OR t.mardi_type_cov = ? 
                                OR t.mercredi_type_cov = 0 OR t.mercredi_type_cov = ? 
                                OR t.jeudi_type_cov = 0 OR t.jeudi_type_cov = ? 
                                OR t.vendredi_type_cov = 0 OR t.vendredi_type_cov = ? 
                                OR t.samedi_type_cov = 0 OR t.samedi_type_cov = ? 
                                OR t.dimanche_type_cov = 0 OR t.dimanche_type_cov = ? '
                            , array(
                        $filtre["type_cov"],
                        $filtre["type_cov"],
                        $filtre["type_cov"],
                        $filtre["type_cov"],
                        $filtre["type_cov"],
                        $filtre["type_cov"],
                        $filtre["type_cov"],
                        $filtre["type_cov"]
                    ));
                }

                //gestion des horaires de prise de service
                if (!empty($filtre["heure_prise_min"]) || !empty($filtre["heure_prise_max"]) || !empty($filtre["heure_fin_min"]) || !empty($filtre["heure_fin_max"])) {
                    $query->innerJoin('t.CpTrajet cpt');
                    if (!empty($filtre["heure_prise_min"]) || !empty($filtre["heure_prise_max"])) {
                        if (!empty($filtre["heure_prise_min"]) && !empty($filtre["heure_prise_max"])) {
                            $query->andWhere('(NOT ((cpt.lundi_prise_service_max <= ?  ) OR (? <= cpt.lundi_prise_service_min  ))) OR 
                                (NOT ((cpt.mardi_prise_service_max <= ?  ) OR (? <= cpt.mardi_prise_service_min  ))) OR 
                                (NOT ((cpt.mercredi_prise_service_max <= ?  ) OR (? <= cpt.mercredi_prise_service_min  ))) OR 
                                (NOT ((cpt.jeudi_prise_service_max <= ?  ) OR (? <= cpt.jeudi_prise_service_min  ))) OR 
                                (NOT ((cpt.vendredi_prise_service_max <= ?  ) OR (? <= cpt.vendredi_prise_service_min  ))) OR 
                                (NOT ((cpt.samedi_prise_service_max <= ?  ) OR (? <= cpt.samedi_prise_service_min  ))) OR 
                                (NOT ((cpt.dimanche_prise_service_max <= ?  ) OR (? <= cpt.dimanche_prise_service_min  )))'
                                    , array($filtre["heure_prise_min"],
                                $filtre["heure_prise_max"],
                                $filtre["heure_prise_min"],
                                $filtre["heure_prise_max"],
                                $filtre["heure_prise_min"],
                                $filtre["heure_prise_max"],
                                $filtre["heure_prise_min"],
                                $filtre["heure_prise_max"],
                                $filtre["heure_prise_max"],
                                $filtre["heure_prise_min"],
                                $filtre["heure_prise_max"],
                                $filtre["heure_prise_max"],
                                $filtre["heure_prise_min"],
                                $filtre["heure_prise_max"]
                            ));
                        } elseif (!empty($filtre["heure_prise_min"])) {
                            $query->andWhere('(? <= lundi_prise_service_max OR
                                    ? <= mardi_prise_service_max  OR 
                                    ? <= mercredi_prise_service_max  OR 
                                    ? <= jeudi_prise_service_max  OR 
                                    ? <= vendredi_prise_service_max  OR 
                                    ? <= samedi_prise_service_max  OR 
                                    ? <= dimanche_prise_service_max ) '
                                    , array($filtre["heure_prise_min"],
                                $filtre["heure_prise_min"],
                                $filtre["heure_prise_min"],
                                $filtre["heure_prise_min"],
                                $filtre["heure_prise_min"],
                                $filtre["heure_prise_min"],
                                $filtre["heure_prise_min"]
                            ));
                        } elseif (!empty($filtre["heure_prise_max"])) {
                            $query->andWhere('(? >= lundi_prise_service_min OR
                                    ? >= mardi_prise_service_min  OR 
                                    ? >= mercredi_prise_service_min  OR 
                                    ? >= jeudi_prise_service_min  OR 
                                    ? >= vendredi_prise_service_min  OR 
                                    ? >= samedi_prise_service_min  OR 
                                    ? >= dimanche_prise_service_min ) '
                                    , array($filtre["heure_prise_max"],
                                $filtre["heure_prise_max"],
                                $filtre["heure_prise_max"],
                                $filtre["heure_prise_max"],
                                $filtre["heure_prise_max"],
                                $filtre["heure_prise_max"],
                                $filtre["heure_prise_max"]
                            ));
                        }
                    }

                    //gestion des horaires de fin de service
                    if (!empty($filtre["heure_fin_min"]) || !empty($filtre["heure_fin_max"])) {
                        if (!empty($filtre["heure_fin_min"]) && !empty($filtre["heure_fin_max"])) {
                            $query->andWhere('(NOT ((cpt.lundi_fin_service_max <= ?  ) OR (? <= cpt.lundi_fin_service_min  ))) OR 
                                (NOT ((cpt.mardi_fin_service_max <= ?  ) OR (? <= cpt.mardi_fin_service_min  ))) OR 
                                (NOT ((cpt.mercredi_fin_service_max <= ?  ) OR (? <= cpt.mercredi_fin_service_min  ))) OR 
                                (NOT ((cpt.jeudi_fin_service_max <= ?  ) OR (? <= cpt.jeudi_fin_service_min  ))) OR 
                                (NOT ((cpt.vendredi_fin_service_max <= ?  ) OR (? <= cpt.vendredi_fin_service_min  ))) OR 
                                (NOT ((cpt.samedi_fin_service_max <= ?  ) OR (? <= cpt.samedi_fin_service_min  ))) OR 
                                (NOT ((cpt.dimanche_fin_service_max <= ?  ) OR (? <= cpt.dimanche_fin_service_min  )))'
                                    , array($filtre["heure_fin_min"],
                                $filtre["heure_fin_max"],
                                $filtre["heure_fin_min"],
                                $filtre["heure_fin_max"],
                                $filtre["heure_fin_min"],
                                $filtre["heure_fin_max"],
                                $filtre["heure_fin_min"],
                                $filtre["heure_fin_max"],
                                $filtre["heure_fin_max"],
                                $filtre["heure_fin_min"],
                                $filtre["heure_fin_max"],
                                $filtre["heure_fin_max"],
                                $filtre["heure_fin_min"],
                                $filtre["heure_fin_max"]
                            ));
                        } elseif (!empty($filtre["heure_fin_min"])) {
                            $query->andWhere('(? <= lundi_fin_service_max OR
                                    ? <= mardi_fin_service_max  OR 
                                    ? <= mercredi_fin_service_max  OR 
                                    ? <= jeudi_fin_service_max  OR 
                                    ? <= vendredi_fin_service_max  OR 
                                    ? <= samedi_fin_service_max  OR 
                                    ? <= dimanche_fin_service_max ) '
                                    , array($filtre["heure_fin_min"],
                                $filtre["heure_fin_min"],
                                $filtre["heure_fin_min"],
                                $filtre["heure_fin_min"],
                                $filtre["heure_fin_min"],
                                $filtre["heure_fin_min"],
                                $filtre["heure_fin_min"]
                            ));
                        } elseif (!empty($filtre["heure_fin_max"])) {
                            $query->andWhere('(? >= lundi_fin_service_min OR
                                    ? >= mardi_fin_service_min  OR 
                                    ? >= mercredi_fin_service_min  OR 
                                    ? >= jeudi_fin_service_min  OR 
                                    ? >= vendredi_fin_service_min  OR 
                                    ? >= samedi_fin_service_min  OR 
                                    ? >= dimanche_fin_service_min ) '
                                    , array($filtre["heure_fin_max"],
                                $filtre["heure_fin_max"],
                                $filtre["heure_fin_max"],
                                $filtre["heure_fin_max"],
                                $filtre["heure_fin_max"],
                                $filtre["heure_fin_max"],
                                $filtre["heure_fin_max"]
                            ));
                        }
                    }
                }

                $query->andWhere('t.etat = 1 AND t.actif > 0  ');
                $query->andWhere('t.lundi_etat = 1 OR t.mardi_etat = 1 OR t.mercredi_etat = 1 OR t.jeudi_etat = 1 OR t.vendredi_etat = 1 OR t.samedi_etat = 1 OR t.dimanche_etat = 1 OR (t.jour_unique_date >= CURDATE() OR t.jour_unique_date_retour >= CURDATE())');
                $query->andWhere("t.id_site = 244");
                //$query->andWhere("(t.id_trajet < 2800000 OR (t.id_trajet > 2809088 AND t.id_trajet < 3000000) OR t.id_trajet > 3000150)");
                $query->orderBy(' t.date_creation desc');
                $query->limit($limit);

                return $query;
            }elseif($FoBo == "BO"){ //passage par GET et provenance du BO
                //dans le cas du BO on récupère les enregistrements en filtrant
                //sur le site
                 $query = Doctrine_Query::create()
                        ->from('Trajet t')
                        ->where('t.id_site = ?', sfConfig::get('sf_id_site_client'))
                        ->andWhere('t.etat = 1 AND t.actif > 0')
                        ->orderBy(' t.date_creation desc')
                        ->limit($limit)
                         ;
            }
        }

        return $query;
    }
    
    
    /*
     * méthode permettant de lister les trajets qui correpondent aux villes
     * passées en argument pour le Back Office
     * @param  varchar      $filtre     filtre determinant la requete à suivre
     * @param  varchar      $filtre     determine le tri à effectuer
     * @param  integer      $filtre     donne le nombre maximum de valeur à retourner
     * @param  varchar      $filtre     indication permettant dindiquer si le resultat est pour le BO ou FO
     *
     * @return query        requete exécutée
     * 
     */

    public function listingBo($filtre=null, $tri=" trajet.id_trajet DESC ", $limit = 10, $FoBo = "FO") {

        $results = array();
        $whereCondition = "";
        $condition_villes_date = "";
        $condition_autre = "";
        //Départ
        //création de la requete en fonction du type de formulaire (simple ou avancé)


        /*         * ****************************************** */
        //traitement du formulaire simple => smpl
        /*         * ****************************************** */

        if (!empty($filtre["form_type"]) && $filtre["form_type"] == "smpl") {   //formulaire simple
            $query = Doctrine_Query::create()
                    ->from('Trajet t');
                    if($FoBo == "BO"){
                        $query->where('t.id_site = ?', sfConfig::get('sf_id_site_client')); //sélection des trajets du site (C+)
                    }
            



            //Filtrage des trajets c+
            //$query->where('t.id_site = ?', sfConfig::get('sf_id_site_client'));
            //Gestion aller simple
            if (!empty($filtre["depart_ville"])) {
                $villesTabDepart = $this->getListeVilleRayon($filtre["depart_ville"][0]["id_ville"], 5000);
                $villesCPTab = array();
                $villesNomTab = array();
                foreach ($villesTabDepart as $ville) {
                    $villesNomTab[] = $ville['nom_ville'];
                    $villesCPTab[] = $ville['code_postal'];
                }
                $query->andWhere('( TRUE ');
                $query->andWhere('( TRUE ');
                $query->andWhereIn('t.depart_ville ', $villesNomTab);
                $query->andWhereIn('t.depart_code_postal', $villesCPTab);
                $query->andWhere(' TRUE )');
                $query->orWhereIn('t.etape1_ville ', $villesNomTab);
                $query->orWhereIn('t.etape2_ville ', $villesNomTab);
                $query->orWhereIn('t.etape3_ville ', $villesNomTab);
                $query->orWhereIn('t.etape4_ville ', $villesNomTab);
                $query->orWhereIn('t.etape5_ville ', $villesNomTab);
                $query->andWhere(' TRUE )');
            } 

            if (!empty($filtre["destination_ville"])) {
                $villesTabDestination = $this->getListeVilleRayon($filtre["destination_ville"][0]["id_ville"], 5000);
                $villesCPTab = array();
                $villesNomTab = array();
                foreach ($villesTabDestination as $ville) {
                    $villesNomTab[] = $ville['nom_ville'];
                    $villesCPTab[] = $ville['code_postal'];
                }
                $query->andWhere('( TRUE ');
                $query->andWhere('( TRUE ');
                $query->andWhereIn('t.destination_ville', $villesNomTab);
                $query->andWhereIn('t.destination_code_postal', $villesCPTab);
                $query->andWhere(' TRUE )');
                $query->orWhereIn('t.etape1_ville ', $villesNomTab);
                $query->orWhereIn('t.etape2_ville ', $villesNomTab);
                $query->orWhereIn('t.etape3_ville ', $villesNomTab);
                $query->orWhereIn('t.etape4_ville ', $villesNomTab);
                $query->orWhereIn('t.etape5_ville ', $villesNomTab);
                $query->andWhere(' TRUE )');
            } 



            //Gestion retour
            if (!empty($filtre["depart_ville"])) {
                //$query->andWhere('t.destination_ville=?', $filtre["depart_ville"][0]["nom_ville"]);
            }

            if (!empty($filtre["destination_ville"])) {
                //$query->andWhere('t.depart_ville=?', $filtre["destination_ville"][0]["nom_ville"]);
            }



            $query->andWhere('t.etat = 1 AND t.actif > 0');
            $query->orderBy(' t.date_creation desc');
            $query->limit($limit);

            return $query;


            /*             * ****************************************** */
            //traitement du formulaire avancé => avnc
            /*             * ****************************************** */
        } else {  //formulaire avancé
            if (!empty($filtre["form_type"]) && $filtre["form_type"] == "avnc") {   //formulaire simple
                //$query = Doctrine_Query::create()
                $query = DQ::create()
                        ->from('Trajet t');
                if($FoBo == "BO"){
                        $query->where('t.id_site = ?', sfConfig::get('sf_id_site_client')); //sélection des trajets réguliers
                    }

                //Filtrage des trajets c+
                //$query->where('t.id_site = ?', sfConfig::get('sf_id_site_client'));
                //Gestion aller simple
                //Filtrage sur l'etablissement
                
                //creation du left join
                if (!empty($filtre["id_etablissement"]) || !empty($filtre["inscrit"])) {    
                    $query->leftJoin('t.Covoitureur c ');
                }
                
                if ($filtre["id_type_trajet"] == 1) {//cas des trajets réguliers
                    //if (!empty($filtre["id_etablissement"])) {
                    if(isset ($filtre["id_etablissement"])){
                        if (count($filtre["id_etablissement"]) != 0 && !empty($filtre["id_etablissement"])) {
                        //recherche sur les id des etablissements fourni en tableau
                        //$query->andWhere('c.cp_etablissement_id = ?', array($filtre["id_etablissement"]));
                        $query->andWhereIn('c.cp_etablissement_id ', $filtre["id_etablissement"]);

                    };
                    }
                    
                }
                
                
                //filtrage sur le nom de l'inscrit
                if (!empty($filtre["inscrit"])) {
                    $nomInscrit = $filtre["inscrit"].'%';
                    $query->andWhere('c.nom like  ?', array($nomInscrit));
                }
                
                //filtrage sur le statut du trajet
                if (!empty($filtre["cp_type_action_statut_id"])) {
                    $query->andWhere('t.cp_type_action_statut_id =  ?', array($filtre["cp_type_action_statut_id"]));
                }
                



                //Filtrage sur la ville de départ
                if (!empty($filtre["depart_ville"])) {

                    //Récupération des villes de départs élargies
                    $villesCPTab = array();
                    $villesNomTab = array();
                    if (!empty($filtre["depart_ville_rayon"])) {
                        $villesTabDepart = $this->getListeVilleRayon($filtre["depart_ville"][0]["id_ville"], $filtre["depart_ville_rayon"]);
                        foreach ($villesTabDepart as $ville) {
                            $villesNomTab[] = $ville['nom_ville'];
                            $villesCPTab[] = $ville['code_postal'];
                        }
                    } else {
                        $villesNomTab[] = $filtre["depart_ville"][0]["nom_ville"];
                        $villesCPTab[] = $filtre["depart_ville"][0]["code_postal"];
                    }

                    $query->andWhere('( TRUE ');
                    $query->andWhere('( TRUE ');
                    $query->andWhereIn('t.depart_ville ', $villesNomTab);
                    $query->andWhereIn('t.depart_code_postal', $villesCPTab);
                    $query->andWhere(' TRUE )');
                    $query->orWhereIn('t.etape1_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape2_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape3_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape4_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape5_ville ', $villesNomTab);
                    $query->andWhere(' TRUE )');
                } 

                //Filtrage sur la ville de destination
                if (!empty($filtre["destination_ville"])) {
                    //Récupération des villes de départs élargies
                    $villesCPTab = array();
                    $villesNomTab = array();
                    if (!empty($filtre["destination_ville_rayon"])) {
                        $villesTabDestination = $this->getListeVilleRayon($filtre["destination_ville"][0]["id_ville"], $filtre["destination_ville_rayon"]);

                        foreach ($villesTabDestination as $ville) {
                            $villesNomTab[] = $ville['nom_ville'];
                            $villesCPTab[] = $ville['code_postal'];
                        }
                    } else {
                        $villesNomTab[] = $filtre["destination_ville"][0]["nom_ville"];
                        $villesCPTab[] = $filtre["destination_ville"][0]["code_postal"];
                    }

                    $query->andWhere('( TRUE ');
                    $query->andWhere('( TRUE ');
                    $query->andWhereIn('t.destination_ville', $villesNomTab);
                    $query->andWhereIn('t.destination_code_postal', $villesCPTab);
                    $query->andWhere(' TRUE )');
                    $query->orWhereIn('t.etape1_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape2_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape3_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape4_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape5_ville ', $villesNomTab);
                    $query->andWhere(' TRUE )');
                } 
                
                //Filtrage sur la ville etape
                if (!empty($filtre["ville_etape"]) && $filtre["ville_etape"] != null) {
                    //Récupération des villes de départs élargies
                   /*
                    $villesCPTab = array();
                    $villesNomTab = array();
                    if (!empty($filtre["destination_ville_rayon"])) {
                        $villesTabDestination = $this->getListeVilleRayon($filtre["destination_ville"][0]["id_ville"], $filtre["destination_ville_rayon"]);

                        foreach ($villesTabDestination as $ville) {
                            $villesNomTab[] = $ville['nom_ville'];
                            $villesCPTab[] = $ville['code_postal'];
                        }
                    } else {
                        $villesNomTab[] = $filtre["ville_etape"][0]["nom_ville"];
                        $villesCPTab[] = $filtre["ville_etape"][0]["code_postal"];
                    }
                    */
                    $villesNomTab = array();
                    //$villesNomTab[] = $filtre["ville_etape"][0]["nom_ville"];
                    
                    //$query->andWhere('( TRUE ');
                    //$query->andWhere('( TRUE ');
                    //$query->andWhereIn('t.destination_ville', $villesNomTab);
                    //$query->andWhereIn('t.destination_code_postal', $villesCPTab);
                    //$query->andWhere(' TRUE )');
                    /*
                    $query->orWhere('t.etape1_ville = ? ', $villesNomTab);
                    $query->orWhere('t.etape2_ville = ? ', $villesNomTab);
                    $query->orWhere('t.etape3_ville = ? ', $villesNomTab);
                    $query->orWhere('t.etape4_ville = ? ', $villesNomTab);
                    $query->orWhere('t.etape5_ville = ? ', $villesNomTab);
                    */
                    /*
                    $query->orWhere('t.etape1_ville = ? ', array($filtre["ville_etape"][0]["nom_ville"]));
                    $query->orWhere('t.etape2_ville = ? ', array($filtre["ville_etape"][0]["nom_ville"]));
                    $query->orWhere('t.etape3_ville = ? ', array($filtre["ville_etape"][0]["nom_ville"]));
                    $query->orWhere('t.etape4_ville = ? ', array($filtre["ville_etape"][0]["nom_ville"]));
                    $query->orWhere('t.etape5_ville = ? ', array($filtre["ville_etape"][0]["nom_ville"]));
                    $query->andWhere(' TRUE )');
                    */
                    
                    $query->andWhere('( TRUE ');
                    //$query->andWhere('( TRUE ');
                    //$query->andWhereIn('t.destination_ville', $villesNomTab);
                    //$query->andWhereIn('t.destination_code_postal', $villesCPTab);
                    //$query->andWhere(' TRUE )');
                    /*
                    $query->orWhere('t.etape1_ville = ? ', $villesNomTab);
                    $query->orWhere('t.etape2_ville = ? ', $villesNomTab);
                    $query->orWhere('t.etape3_ville = ? ', $villesNomTab);
                    $query->orWhere('t.etape4_ville = ? ', $villesNomTab);
                    $query->orWhere('t.etape5_ville = ? ', $villesNomTab);
                    */
                    
                    $query->andWhere('t.etape1_ville = ? ', array($filtre["ville_etape"]));
                    $query->orWhere('t.etape2_ville = ? ', array($filtre["ville_etape"]));
                    $query->orWhere('t.etape3_ville = ? ', array($filtre["ville_etape"]));
                    $query->orWhere('t.etape4_ville = ? ', array($filtre["ville_etape"]));
                    $query->orWhere('t.etape5_ville = ? ', array($filtre["ville_etape"]));
                    $query->andWhere(' TRUE )');
                    
                    
                    
                    //$query->orWhere('t.etape5_ville = '.$filtre["ville_etape"] );
                
                } 

                if (!empty($filtre["depart_autre_lieu"])) {
                    $query->andWhere('t.depart_autre_lieu = ?', array($filtre["depart_autre_lieu"]));
                }
                
                if (!empty($filtre["jour_unique_date"])) {
                    $query->andWhere('t.jour_unique_date = ? or t.jour_unique_date_retour = ?', array($filtre["jour_unique_date"],$filtre["jour_unique_date"]));
                }

                if (!empty($filtre["destination_autre_lieu"])) {
                    $query->andWhere('t.destination_autre_lieu = ?', array($filtre["destination_autre_lieu"]));
                }

                if (!empty($filtre["id_evenement"])) {
                    $query->andWhere('t.id_evenement = ?', array($filtre["id_evenement"]));
                }

                if (!empty($filtre["id_type_trajet"])) {
                    if ($filtre["id_type_trajet"] != 0) {
                        $query->andWhere('t.id_type_trajet = ?', array($filtre["id_type_trajet"]));
                    }
                    
                    //cas du trajet de type PSA
                    if ($filtre["id_type_trajet"] == 3) {
                        $query->leftJoin('t.CpTrajet ct ');
                        if (!empty($filtre["horaire_id"])) {
                            $query->andWhere('ct.cp_etablissement_horaire_id = ?', array($filtre["horaire_id"]));
                        };
                        if (!empty($filtre["secteur_id"])) {
                            $query->andWhere('ct.cp_etablissement_secteur_id = ?', array($filtre["secteur_id"]));
                        };
                    }
                    
                }else{
                    $query->andWhere('(t.id_type_trajet = 1 or t.id_type_trajet = 2 or t.id_type_trajet = 3)');
                }
                
                if (!empty($filtre["type_cov"]) and $filtre["type_cov"] != "0") {
                    $query->andWhere('t.jour_unique_type_cov = 0 OR t.jour_unique_type_cov = ?
                                OR t.lundi_type_cov = 0 OR t.lundi_type_cov = ? 
                                OR t.mardi_type_cov = 0 OR t.mardi_type_cov = ? 
                                OR t.mercredi_type_cov = 0 OR t.mercredi_type_cov = ? 
                                OR t.jeudi_type_cov = 0 OR t.jeudi_type_cov = ? 
                                OR t.vendredi_type_cov = 0 OR t.vendredi_type_cov = ? 
                                OR t.samedi_type_cov = 0 OR t.samedi_type_cov = ? 
                                OR t.dimanche_type_cov = 0 OR t.dimanche_type_cov = ? '
                            , array(
                        $filtre["type_cov"],
                        $filtre["type_cov"],
                        $filtre["type_cov"],
                        $filtre["type_cov"],
                        $filtre["type_cov"],
                        $filtre["type_cov"],
                        $filtre["type_cov"],
                        $filtre["type_cov"]
                    ));
                }

                //gestion des horaires de prise de service si type trajet de type regulier
                if ($filtre["id_type_trajet"] == 1) {
                    if (!empty($filtre["heure_prise_min"]) || !empty($filtre["heure_prise_max"]) || !empty($filtre["heure_fin_min"]) || !empty($filtre["heure_fin_max"])) {
                        $query->innerJoin('t.CpTrajet c');
                        if (!empty($filtre["heure_prise_min"]) || !empty($filtre["heure_prise_max"])) {
                            if (!empty($filtre["heure_prise_min"]) && !empty($filtre["heure_prise_max"])) {
                                
                                $query->andWhere('
                                        ( IF((t.lundi_etat=1),(? <= c.lundi_prise_service_min AND c.lundi_prise_service_min <= ? ) OR (? <=c.lundi_prise_service_max AND c.lundi_prise_service_max <= ?),false) OR
                                         IF((t.mardi_etat=1),(? <= c.mardi_prise_service_min AND c.mardi_prise_service_min <= ? ) OR (? <=c.mardi_prise_service_max AND c.mardi_prise_service_max <= ?),false) OR 
                                         IF((t.mercredi_etat=1),(? <= c.mercredi_prise_service_min AND c.mercredi_prise_service_min <= ? ) OR (? <=c.mercredi_prise_service_max AND c.mercredi_prise_service_max <= ?),false) OR 
                                         IF((t.jeudi_etat=1),(? <= c.jeudi_prise_service_min AND c.jeudi_prise_service_min <= ? ) OR (? <=c.jeudi_prise_service_max AND c.jeudi_prise_service_max <= ?),false) OR 
                                         IF((t.vendredi_etat=1),(? <= c.vendredi_prise_service_min AND c.vendredi_prise_service_min <= ? ) OR (? <=c.vendredi_prise_service_max AND c.vendredi_prise_service_max <= ?),false) OR 
                                         IF((t.samedi_etat=1),(? <= c.samedi_prise_service_min AND c.samedi_prise_service_min <= ? ) OR (? <=c.samedi_prise_service_max AND c.samedi_prise_service_max <= ?),false) OR 
                                         IF((t.dimanche_etat=1),(? <= c.dimanche_prise_service_min AND c.dimanche_prise_service_min <= ? ) OR (? <=c.dimanche_prise_service_max AND c.dimanche_prise_service_max <= ?),false)    ) '

                                        , array($filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"]
                                ));
                                
                                /*
                                $query->andWhere('(NOT ((cpt.lundi_prise_service_max <= ?  ) OR (? <= cpt.lundi_prise_service_min  ))) OR 
                                    (NOT ((cpt.mardi_prise_service_max <= ?  ) OR (? <= cpt.mardi_prise_service_min  ))) OR 
                                    (NOT ((cpt.mercredi_prise_service_max <= ?  ) OR (? <= cpt.mercredi_prise_service_min  ))) OR 
                                    (NOT ((cpt.jeudi_prise_service_max <= ?  ) OR (? <= cpt.jeudi_prise_service_min  ))) OR 
                                    (NOT ((cpt.vendredi_prise_service_max <= ?  ) OR (? <= cpt.vendredi_prise_service_min  ))) OR 
                                    (NOT ((cpt.samedi_prise_service_max <= ?  ) OR (? <= cpt.samedi_prise_service_min  ))) OR 
                                    (NOT ((cpt.dimanche_prise_service_max <= ?  ) OR (? <= cpt.dimanche_prise_service_min  )))'
                                        , array($filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_max"]
                                ));
                                */
                            } elseif (!empty($filtre["heure_prise_min"])) {
                                $query->andWhere('( IF((t.lundi_etat=1),(? <= c.lundi_prise_service_max),false) OR
                                         IF((t.mardi_etat=1),(? <= c.mardi_prise_service_max),false)     OR 
                                         IF((t.mercredi_etat=1),(? <= c.mercredi_prise_service_max),false)     OR 
                                         IF((t.jeudi_etat=1),(? <= c.jeudi_prise_service_max),false)     OR 
                                         IF((t.vendredi_etat=1),(? <= c.vendredi_prise_service_max),false)     OR 
                                         IF((t.samedi_etat=1),(? <= c.samedi_prise_service_max),false)     OR 
                                         IF((t.dimanche_etat=1),(? <= c.dimanche_prise_service_max),false)    ) '
                                        , array($filtre["heure_prise_min"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_min"]
                                ));
                                /*
                                 $query->andWhere('(? <= lundi_prise_service_max OR
                                        ? <= mardi_prise_service_max  OR 
                                        ? <= mercredi_prise_service_max  OR 
                                        ? <= jeudi_prise_service_max  OR 
                                        ? <= vendredi_prise_service_max  OR 
                                        ? <= samedi_prise_service_max  OR 
                                        ? <= dimanche_prise_service_max ) '
                                        , array($filtre["heure_prise_min"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_min"],
                                    $filtre["heure_prise_min"]
                                ));
                                */
                            } elseif (!empty($filtre["heure_prise_max"])) {
                                /*
                                $query->andWhere('(? >= lundi_prise_service_min OR
                                        ? >= mardi_prise_service_min  OR 
                                        ? >= mercredi_prise_service_min  OR 
                                        ? >= jeudi_prise_service_min  OR 
                                        ? >= vendredi_prise_service_min  OR 
                                        ? >= samedi_prise_service_min  OR 
                                        ? >= dimanche_prise_service_min ) '
                                        , array($filtre["heure_prise_max"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_max"]
                                ));
                                */
                                $query->andWhere('( IF((t.lundi_etat=1),(? >= c.lundi_prise_service_min),"FALSE")  OR
                                        IF((t.mardi_etat=1),(? >= c.mardi_prise_service_min),"FALSE")       OR 
                                        IF((t.mercredi_etat=1),(? >= c.mercredi_prise_service_min),"FALSE")   OR 
                                        IF((t.jeudi_etat=1),(? >= c.jeudi_prise_service_min),"FALSE")        OR 
                                        IF((t.vendredi_etat=1),(? >= c.vendredi_prise_service_min),"FALSE")  OR 
                                        IF((t.samedi_etat=1),(? >= c.samedi_prise_service_min),"FALSE")     OR 
                                        IF((t.dimanche_etat=1),(? >= c.dimanche_prise_service_min),"FALSE") ) '
                                        , array($filtre["heure_prise_max"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_max"],
                                    $filtre["heure_prise_max"]
                                ));
                            }
                        }

                        //gestion des horaires de fin de service
                        if (!empty($filtre["heure_fin_min"]) || !empty($filtre["heure_fin_max"])) {
                            if (!empty($filtre["heure_fin_min"]) && !empty($filtre["heure_fin_max"])) {
                                
                                $query->andWhere('
                                        ( IF((t.lundi_etat=1),(? <= c.lundi_fin_service_min AND c.lundi_fin_service_min <= ? ) OR (? <=c.lundi_fin_service_max AND c.lundi_fin_service_max <= ?),false) OR
                                         IF((t.mardi_etat=1),(? <= c.mardi_fin_service_max AND c.mardi_fin_service_max <= ? ) OR (? <=c.mardi_fin_service_max AND c.mardi_fin_service_max <= ?),false) OR 
                                         IF((t.mercredi_etat=1),(? <= c.mercredi_fin_service_min AND c.mercredi_fin_service_min <= ? ) OR (? <=c.mercredi_fin_service_max AND c.mercredi_fin_service_max <= ?),false) OR 
                                         IF((t.jeudi_etat=1),(? <= c.jeudi_fin_service_min AND c.jeudi_fin_service_min <= ? ) OR (? <=c.jeudi_fin_service_max AND c.jeudi_fin_service_max <= ?),false) OR 
                                         IF((t.vendredi_etat=1),(? <= c.vendredi_fin_service_min AND c.vendredi_fin_service_min <= ? ) OR (? <=c.vendredi_fin_service_max AND c.vendredi_fin_service_max <= ?),false) OR 
                                         IF((t.samedi_etat=1),(? <= c.samedi_fin_service_min AND c.samedi_fin_service_min <= ? ) OR (? <=c.samedi_fin_service_max AND c.samedi_fin_service_max <= ?),false) OR 
                                         IF((t.dimanche_etat=1),(? <= c.dimanche_fin_service_min AND c.dimanche_fin_service_min <= ? ) OR (? <=c.dimanche_fin_service_max AND c.dimanche_fin_service_max <= ?),false)    ) '

                                        , array($filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"]
                                ));
                               
                                
                                /*
                                $query->andWhere('(NOT ((cpt.lundi_fin_service_max <= ?  ) OR (? <= cpt.lundi_fin_service_min  ))) OR 
                                    (NOT ((cpt.mardi_fin_service_max <= ?  ) OR (? <= cpt.mardi_fin_service_min  ))) OR 
                                    (NOT ((cpt.mercredi_fin_service_max <= ?  ) OR (? <= cpt.mercredi_fin_service_min  ))) OR 
                                    (NOT ((cpt.jeudi_fin_service_max <= ?  ) OR (? <= cpt.jeudi_fin_service_min  ))) OR 
                                    (NOT ((cpt.vendredi_fin_service_max <= ?  ) OR (? <= cpt.vendredi_fin_service_min  ))) OR 
                                    (NOT ((cpt.samedi_fin_service_max <= ?  ) OR (? <= cpt.samedi_fin_service_min  ))) OR 
                                    (NOT ((cpt.dimanche_fin_service_max <= ?  ) OR (? <= cpt.dimanche_fin_service_min  )))'
                                        , array($filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_max"]
                                ));
                                */
                            } elseif (!empty($filtre["heure_fin_min"])) {
                                $query->andWhere('( IF((t.lundi_etat=1),(? <= c.lundi_fin_service_max),false) OR
                                        ( IF((t.mardi_etat=1),(? <= c.mardi_fin_service_max ),false)          OR 
                                        ( IF((t.mercredi_etat=1),(? <= c.mercredi_fin_service_max),false)     OR 
                                        ( IF((t.jeudi_etat=1),(? <= c.jeudi_fin_service_max),false)           OR 
                                        ( IF((t.vendredi_etat=1),(? <= c.vendredi_fin_service_max),false)     OR 
                                        ( IF((t.samedi_etat=1),(? <= c.samedi_fin_service_max),false)         OR 
                                        ( IF((t.dimanche_etat=1),(? <= c.dimanche_fin_service_max),false)    ) '
                                        , array($filtre["heure_fin_min"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_min"]
                                ));
                                
                                
                                /*
                                $query->andWhere('(? <= lundi_fin_service_max OR
                                        ? <= mardi_fin_service_max  OR 
                                        ? <= mercredi_fin_service_max  OR 
                                        ? <= jeudi_fin_service_max  OR 
                                        ? <= vendredi_fin_service_max  OR 
                                        ? <= samedi_fin_service_max  OR 
                                        ? <= dimanche_fin_service_max ) '
                                        , array($filtre["heure_fin_min"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_min"],
                                    $filtre["heure_fin_min"]
                                ));
                                */
                            } elseif (!empty($filtre["heure_fin_max"])) {
                                
                                
                                $query->andWhere('( IF((t.lundi_etat=1),(? >= c.lundi_fin_service_min),"FALSE") OR
                                         IF((t.mardi_etat=1),(? >= c.mardi_fin_service_min),"FALSE")           OR 
                                         IF((t.mercredi_etat=1),(? >= c.mercredi_fin_service_min),"FALSE")     OR 
                                         IF((t.jeudi_etat=1),(? >= c.jeudi_fin_service_min),"FALSE")           OR 
                                         IF((t.vendredi_etat=1),(? >= c.vendredi_fin_service_min),"FALSE")     OR 
                                         IF((t.samedi_etat=1),(? >= c.samedi_fin_service_min),"FALSE")         OR 
                                         IF((t.dimanche_etat=1),(? >= c.dimanche_fin_service_min),"FALSE")    ) '
                                        , array($filtre["heure_fin_max"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_max"]
                                ));
                                
                                
                                
                                /*
                                $query->andWhere('(? >= lundi_fin_service_min OR
                                        ? >= mardi_fin_service_min  OR 
                                        ? >= mercredi_fin_service_min  OR 
                                        ? >= jeudi_fin_service_min  OR 
                                        ? >= vendredi_fin_service_min  OR 
                                        ? >= samedi_fin_service_min  OR 
                                        ? >= dimanche_fin_service_min ) '
                                        , array($filtre["heure_fin_max"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_max"],
                                    $filtre["heure_fin_max"]
                                ));
                                */
                            }
                        }




                    }
                }
                
                //$query->andWhere('DATE_FORMAT(date_creation,`%Y-%m-%d`) = ?', array($filtre["date_creation"]));
                
                //$dateRecup = array();
                    //$dateRecup = $filtre["date_creation"];
                    //gestion de la date de création
                    /*
                    if (!empty($dateRecup["day"]) && !empty($dateRecup["month"]) && !empty($dateRecup["year"]) ) {
                        $dateGenere = $dateRecup["year"].'-'.$dateRecup["month"].'-'.$dateRecup["day"];
                        $query->andWhere('DATE_FORMAT(date_creation,`%Y-%m-%d`) = ?', array($dateGenere));
                    }
                     * 
                     */
                /*
                if ($filtre["id_type_trajet"] == 2) {// cas du trajet ponctuel
                    if (!empty($filtre["date_creation"]["day"]) && !empty($filtre["date_creation"]["month"]) && !empty($filtre["date_creation"]["year"]) ) {
                        $dateGenere = $filtre["date_creation"]["year"].'-'.$filtre["date_creation"]["month"].'-'.$filtre["date_creation"]["day"];
                        //$query->andWhere('DATE_FORMAT(date_creation,\'%Y-%c-%e\') = ?', array($dateGenere));   
                        $query->andWhere('DATE_FORMAT(jour_unique_date,\'%Y-%c-%e\') = ?', array($dateGenere));
                    }
                }
                 * 
                 */
                    //$query->andWhere('DATE_FORMAT(date_creation,`%Y-%m-%d`) = ?', array($filtre["date_creation"]));
                
                //gestion de la date de création
                if ($filtre["id_type_trajet"] == 2) {// cas du trajet ponctuel
                    if (!empty($filtre["date_creation"]["day"]) && !empty($filtre["date_creation"]["month"]) && !empty($filtre["date_creation"]["year"]) ) {
                        $dateGenere = $filtre["date_creation"]["year"].'-'.$filtre["date_creation"]["month"].'-'.$filtre["date_creation"]["day"];
                        //$query->andWhere('DATE_FORMAT(date_creation,\'%Y-%c-%e\') = ?', array($dateGenere));   
                        $query->andWhere('DATE_FORMAT(jour_unique_date,\'%Y-%c-%e\') = ?', array($dateGenere));
                    }
                }
                if (isset($filtre["date_creation_deb"]) || isset($filtre["date_creation_fin"])){
                    if (isset($filtre["date_creation_deb"]) && isset($filtre["date_creation_fin"])){
                        
                        $query->andWhere('(date_creation BETWEEN ? AND ?)', array($filtre["date_creation_deb"], $filtre["date_creation_fin"]));
                    }  elseif (isset($filtre["date_creation_deb"])) {
                        $query->andWhere('(date_creation >= ?)', array($filtre["date_creation_deb"]));
                    }else{
                        $query->andWhere('(date_creation <= ?)', array($filtre["date_creation_fin"]));
                    }
                }

                $query->andWhere('t.etat = 1 AND t.actif > 0  ');
                $query->orderBy(' t.date_creation desc');
                $query->limit($limit);

                return $query;
            }elseif($FoBo == "BO"){ //passage par GET et provenance du BO
                //dans le cas du BO on récupère les enregistrements en filtrant
                //sur le site
                 $query = Doctrine_Query::create()
                        ->from('Trajet t')
                        ->where('t.id_site = ?', sfConfig::get('sf_id_site_client'))
                        ->andWhere('t.etat = 1 AND t.actif > 0')
                        ->orderBy(' t.date_creation desc')
                        ->limit($limit)
                         ;
            }
        }

        return $query;
    }

    /*
     * Recherche de trajets occasionnels
     */

    public function listingAlloStop($filtre=null, $tri=" trajet.id_trajet DESC ", $limit = 10) {

        $results = array();
        $whereCondition = "";
        $condition_villes_date = "";
        $condition_autre = "";
        //Départ
        //création de la requete en fonction du type de formulaire (simple ou avancé)


        /*         * ****************************************** */
        //traitement du formulaire simple => smpl
        /*         * ****************************************** */

        if (!empty($filtre["form_type"]) && $filtre["form_type"] == "smpl") {   //formulaire simple
            $query = Doctrine_Query::create()
                    ->from('Trajet t')
                    ->where('t.id_type_trajet = 2') //sélection des trajets occasionnelles
            ;
            //Filtrage des trajets c+
            //->where('t.id_site = ?', sfConfig::get('sf_id_site_client'));
            //Gestion aller simple
            if (!empty($filtre["depart_ville"])) {
                $villesTabDepart = $this->getListeVilleRayon($filtre["depart_ville"][0]["id_ville"], 5000);
                $villesCPTab = array();
                $villesNomTab = array();
                foreach ($villesTabDepart as $ville) {
                    $villesNomTab[] = $ville['nom_ville'];
                    $villesCPTab[] = $ville['code_postal'];
                }
                $query->andWhere('( TRUE ');
                $query->andWhere('( TRUE ');
                $query->andWhereIn('t.depart_ville ', $villesNomTab);
                $query->andWhereIn('t.depart_code_postal', $villesCPTab);
                $query->andWhere(' TRUE )');
                $query->orWhereIn('t.etape1_ville ', $villesNomTab);
                $query->orWhereIn('t.etape2_ville ', $villesNomTab);
                $query->orWhereIn('t.etape3_ville ', $villesNomTab);
                $query->orWhereIn('t.etape4_ville ', $villesNomTab);
                $query->orWhereIn('t.etape5_ville ', $villesNomTab);
                $query->andWhere(' TRUE )');
            }

            if (!empty($filtre["destination_ville"])) {
                $villesTabDestination = $this->getListeVilleRayon($filtre["destination_ville"][0]["id_ville"], 5000);
                $villesCPTab = array();
                $villesNomTab = array();
                foreach ($villesTabDestination as $ville) {
                    $villesNomTab[] = $ville['nom_ville'];
                    $villesCPTab[] = $ville['code_postal'];
                }
                $query->andWhere('( TRUE ');
                $query->andWhere('( TRUE ');
                $query->andWhereIn('t.destination_ville', $villesNomTab);
                $query->andWhereIn('t.destination_code_postal', $villesCPTab);
                $query->andWhere(' TRUE )');
                $query->orWhereIn('t.etape1_ville ', $villesNomTab);
                $query->orWhereIn('t.etape2_ville ', $villesNomTab);
                $query->orWhereIn('t.etape3_ville ', $villesNomTab);
                $query->orWhereIn('t.etape4_ville ', $villesNomTab);
                $query->orWhereIn('t.etape5_ville ', $villesNomTab);
                $query->andWhere(' TRUE )');
            }



            //Gestion retour
            if (!empty($filtre["depart_ville"])) {
                //$query->andWhere('t.destination_ville=?', $filtre["depart_ville"][0]["nom_ville"]);
            }

            if (!empty($filtre["destination_ville"])) {
                //$query->andWhere('t.depart_ville=?', $filtre["destination_ville"][0]["nom_ville"]);
            }



            $query->andWhere('t.etat = 1 AND t.actif > 0');
            $query->orderBy(' t.date_creation desc');
            $query->limit($limit);

            return $query;


            /*             * ****************************************** */
            //traitement du formulaire avancé => avnc
            /*             * ****************************************** */
        } else {  //formulaire avancé
            if (!empty($filtre["form_type"]) && $filtre["form_type"] == "avnc") {   //formulaire simple
                $query = Doctrine_Query::create()
                        ->from('Trajet t');





                //Filtrage sur la ville de départ
                if (!empty($filtre["depart_ville"])) {

                    //Récupération des villes de départs élargies
                    $villesCPTab = array();
                    $villesNomTab = array();
                    if (!empty($filtre["depart_ville_rayon"])) {
                        $villesTabDepart = $this->getListeVilleRayon($filtre["depart_ville"][0]["id_ville"], $filtre["depart_ville_rayon"]);
                        foreach ($villesTabDepart as $ville) {
                            $villesNomTab[] = $ville['nom_ville'];
                            $villesCPTab[] = $ville['code_postal'];
                        }
                    } else {
                        $villesNomTab[] = $filtre["depart_ville"][0]["nom_ville"];
                        $villesCPTab[] = $filtre["depart_ville"][0]["code_postal"];
                    }

                    $query->andWhere('( TRUE ');
                    $query->andWhere('( TRUE ');
                    $query->andWhereIn('t.depart_ville ', $villesNomTab);
                    $query->andWhereIn('t.depart_code_postal', $villesCPTab);
                    $query->andWhere(' TRUE )');
                    $query->orWhereIn('t.etape1_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape2_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape3_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape4_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape5_ville ', $villesNomTab);
                    $query->andWhere(' TRUE )');
                }

                //Filtrage sur la ville de destination
                if (!empty($filtre["destination_ville"])) {
                    //Récupération des villes de départs élargies
                    $villesCPTab = array();
                    $villesNomTab = array();
                    if (!empty($filtre["destination_ville_rayon"])) {
                        $villesTabDestination = $this->getListeVilleRayon($filtre["destination_ville"][0]["id_ville"], $filtre["destination_ville_rayon"]);

                        foreach ($villesTabDestination as $ville) {
                            $villesNomTab[] = $ville['nom_ville'];
                            $villesCPTab[] = $ville['code_postal'];
                        }
                    } else {
                        $villesNomTab[] = $filtre["destination_ville"][0]["nom_ville"];
                        $villesCPTab[] = $filtre["destination_ville"][0]["code_postal"];
                    }

                    $query->andWhere('( TRUE ');
                    $query->andWhere('( TRUE ');
                    $query->andWhereIn('t.destination_ville', $villesNomTab);
                    $query->andWhereIn('t.destination_code_postal', $villesCPTab);
                    $query->andWhere(' TRUE )');
                    $query->orWhereIn('t.etape1_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape2_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape3_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape4_ville ', $villesNomTab);
                    $query->orWhereIn('t.etape5_ville ', $villesNomTab);
                    $query->andWhere(' TRUE )');
                }

                if (!empty($filtre["depart_autre_lieu"])) {
                    $query->andWhere('t.depart_autre_lieu = ?', array($filtre["depart_autre_lieu"]));
                }

                if (!empty($filtre["destination_autre_lieu"])) {
                    $query->andWhere('t.destination_autre_lieu = ?', array($filtre["destination_autre_lieu"]));
                }

                if (!empty($filtre["id_evenement"])) {
                    $query->andWhere('t.id_evenement = ?', array($filtre["id_evenement"]));
                }

                //if (!empty($filtre["id_type_trajet"])) {
                //  $query->andWhere('t.id_type_trajet = ?', array($filtre["id_type_trajet"]));

                if (!empty($filtre["type_cov"]) and $filtre["type_cov"] != "0") {
                    $query->andWhere('t.jour_unique_type_cov = 0 OR t.lundi_type_cov = ?', $filtre["type_cov"]);
                }

                $query->andWhere('t.etat = 1 AND t.actif > 0  ');
                $query->orderBy(' t.date_creation desc');
                $query->limit($limit);

                return $query;
            }
        }

        return $query;
    }

    /*
     * méthode permettant de lister les trajets qui correpondent aux villes
     * d'une communaute de communes
     * 
     * @return query     listingComntCom      Retourne les trajets pour les villes (de la communaute de commune) passées en ragument 
     */

    public function listingComntCom($tabVilleComntCom = null, $type_trajet = null) {

        if (!is_null($type_trajet)) {
            if ($type_trajet == 'dest') { //trajets à destination des villes
                if (!is_null($tabVilleComntCom) && count($tabVilleComntCom) != 0) {
                    $query = Doctrine_Query::create()
                            ->from('Trajet t')
                    ;

                    $query->andWhereIn('t.destination_ville', $tabVilleComntCom);


                    $query->andWhere('t.etat = 1 ');
                    $query->orderBy(' t.date_creation desc');


                    return $query;
                }
            } elseif ($type_trajet == 'depart') {//trajets au depart des villes
                if (!is_null($tabVilleComntCom) && count($tabVilleComntCom) != 0) {
                    $query = Doctrine_Query::create()
                            ->from('Trajet t')
                    ;

                    $query->andWhereIn('t.depart_ville', $tabVilleComntCom);

                    $query->andWhere('t.etat = 1 ');
                    $query->orderBy(' t.date_creation desc');


                    return $query;
                }
            } else {//trajets à destination et au depart des villes
                if (!is_null($tabVilleComntCom) && count($tabVilleComntCom) != 0) {
                    $query = Doctrine_Query::create()
                            ->from('Trajet t')
                    ;

                    $query->andWhereIn('t.depart_ville', $tabVilleComntCom);
                    $query->andWhereIn('t.destination_ville', $tabVilleComntCom);

                    $query->andWhere('t.etat = 1 ');
                    $query->orderBy(' t.date_creation desc');


                    return $query;
                }
            }
        }
    }

    /*
     * recherche une liste de trajets sur les criteres fournis
     */

    public function getRechercheTrajetPourEquipage($villeOrig = null, $villeDest = null, $mail = null, $statut = null) {

        $query = $this->createQuery('t')
                ->where('t.id_site = ?', sfConfig::get('sf_id_site_client'));

        //recherche sur la ville de depart
        if ($villeOrig != '') {
            //extraction des infos entre parentheses
            $outil = new Util();

            $chaine = $outil->extractCpLibelle($villeOrig);
            $villeResult = Doctrine_Core::getTable('VilleFr')->findOneByNomVille($chaine);
            $chaineInseeIdVille = "fr-".$villeResult->getIdVille();


            //$query->andWhere('t.id_depart = ?', $villeResult->getCodeInsee());
            /*
            $query->andWhere('t.id_depart = ? OR t.etape1_insee  = ? OR t.etape2_insee  = ? OR t.etape3_insee  = ? OR t.etape4_insee  = ? OR t.etape5_insee  = ?',
                    array($villeResult->getCodeInsee(),
                        $chaineInseeIdVille,
                        $chaineInseeIdVille,
                        $chaineInseeIdVille,
                        $chaineInseeIdVille,
                        $chaineInseeIdVille
                        )
                    );
             * 
             */
            
            
            $query->andWhere('( TRUE ');
                $query->andWhere('( TRUE ');
                $query->andWhere('t.id_depart = ?', $villeResult->getCodeInsee());;
                $query->andWhere(' TRUE )');
               // $query->orWhere('t.id_depart = ?', $villeResult->getCodeInsee());
                $query->orWhere('t.etape1_insee  = ?', $chaineInseeIdVille);
                $query->orWhere('t.etape2_insee  = ?', $chaineInseeIdVille);
                $query->orWhere('t.etape3_insee  = ?', $chaineInseeIdVille);
                $query->orWhere('t.etape4_insee  = ?', $chaineInseeIdVille);
                $query->orWhere('t.etape5_insee  = ?', $chaineInseeIdVille);
                $query->andWhere(' TRUE )');
             
             
        }

        //recherche sur la ville de destination
        if ($villeDest != '') {
            //extraction des infos entre parentheses
            $outil = new Util();

            $chaine = $outil->extractCpLibelle($villeDest);
            $villeResult = Doctrine_Core::getTable('VilleFr')->findOneByNomVille($chaine);
            
            $chaineInseeIdVille = "fr-".$villeResult->getIdVille();


            //$query->andWhere('t.id_destination = ?', $villeResult->getCodeInsee());
            
            $query->andWhere('( TRUE ');
                $query->andWhere('( TRUE ');
                $query->andWhere('t.id_destination = ?', $villeResult->getCodeInsee());;
                $query->andWhere(' TRUE )');
               // $query->orWhere('t.id_depart = ?', $villeResult->getCodeInsee());
                $query->orWhere('t.etape1_insee  = ?', $chaineInseeIdVille);
                $query->orWhere('t.etape2_insee  = ?', $chaineInseeIdVille);
                $query->orWhere('t.etape3_insee  = ?', $chaineInseeIdVille);
                $query->orWhere('t.etape4_insee  = ?', $chaineInseeIdVille);
                $query->orWhere('t.etape5_insee  = ?', $chaineInseeIdVille);
                $query->andWhere(' TRUE )');
        }
        
        //recherche sur le statut du covoitureur
        if ($statut != 0) {
            $query->andWhere('((t.lundi_etat = 0 OR t.lundi_etat IS NULL) OR t.lundi_type_cov = ?)
                              AND ((t.mardi_etat = 0 OR t.mardi_etat IS NULL) OR t.mardi_type_cov = ?)
                              AND ((t.mercredi_etat = 0 OR t.mercredi_etat IS NULL) OR t.mercredi_type_cov = ?)
                              AND ((t.jeudi_etat = 0 OR t.jeudi_etat IS NULL) OR t.jeudi_type_cov = ?)
                              AND ((t.vendredi_etat = 0 OR t.vendredi_etat IS NULL) OR t.vendredi_type_cov = ?)
                              AND ((t.samedi_etat = 0 OR t.samedi_etat IS NULL) OR t.samedi_type_cov = ?)
                              AND ((t.dimanche_etat = 0 OR t.dimanche_etat IS NULL) OR t.dimanche_type_cov = ?) ',                               
                              array($statut,$statut,$statut,$statut,$statut,$statut,$statut)  );
        }

        //récupération des informations du covoitureur associé au trajet
        $query->leftJoin('t.Covoitureur c');
        
        //recherche sur le mail du covoitureur
        if ($mail != '') {
            $mailRecherche = '%'.$mail.'%';
            $query->andWhere('c.mail LIKE ?',$mailRecherche);
        }
        
        //limitation de la requete
        $query->limit('50');

        return $query->execute();
        //return $query->getSqlQuery();
    }

    //nombre de trajets popur un covoitureur
    public function getCovoitureurTrajetNb($id_utilisateur) {

        $qt = Doctrine_Query::create()
                ->select('COUNT(DISTINCT t.id_trajet) AS nb_trajet')
                ->from('Trajet t')
                ->where('t.etat = 1 ')
                ->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'))
                ->andWhere('t.id_utilisateur = ?', $id_utilisateur)
        ;



        $trajet = $qt->fetchArray();

        return $trajet[0]['nb_trajet'];
    }

    //nombre de equipage pour un covoitureur
    public function getCovoitureurTrajetEquipageNb($id_utilisateur) {

        $qt = Doctrine_Query::create()
                ->select('COUNT(DISTINCT t.id_trajet) AS nb_trajetEquipage')
                ->from('Trajet t')
                ->where('t.id_site = ?', sfConfig::get('sf_id_site_client'))
                //->andWhere('t.etat = 1 ')
                ->andWhere('t.id_utilisateur = ?', $id_utilisateur)
                //->andWhere('!ISNULL(t.id_equipage) AND t.id_equipage != 0')
                ->andWhere('(t.id_equipage is not null) AND t.id_equipage != 0')
        ;



        $trajet = $qt->fetchArray();

        return $trajet[0]['nb_trajetEquipage'];
    }

    /*     * ********************************************************************* */
    /*         Methodes pour les statistiques                               */
    /*     * ********************************************************************* */

    //nombre de trajets déposés (actifs)
    public function getStatTrajetNb($dateDeb = null, $dateFin = null, $etab = null, $groupeStat = null, $communauteCommune = null) {


        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt = Doctrine_Query::create()
                    ->select('COUNT(DISTINCT t.id_trajet) AS nb_trajet')
                    ->from('Trajet t, Covoitureur c')
                    ->where('t.id_utilisateur = c.id_utilisateur');
            ;
        } else {
            $qt = Doctrine_Query::create()
                    ->select('COUNT(DISTINCT t.id_trajet) AS nb_trajet')
                    ->from('Trajet t')
            ;
        }
        $qt->andWhere('t.etat = 1 ');
        $qt->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $qt->andWhere('t.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $qt->andWhere('t.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $qt->andWhere('t.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt->andWhereIn('c.cp_etablissement_id', $etab);
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($groupeStat, $groupeStat));
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($communauteCommune, $communauteCommune));
        }

        $trajet = $qt->fetchArray();

        return $trajet[0]['nb_trajet'];
    }

    //nombre de trajets conducteur et indifférents => trajets occasionnels
    public function getStatTrajetNbCondOcc($dateDeb = null, $dateFin = null, $etab = null, $groupeStat = null, $communauteCommune = null) {

        /* $qt = Doctrine_Query::create()
          ->select('COUNT(DISTINCT t.id_trajet) AS nb_trajet_cond')
          ->from('Trajet t')
          ->where('t.etat = 1 ')
          ->andWhere('t.id_type_trajet = 2')
          ->andWhere('t.jour_unique_type_cov != 2')
          ->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));
         */

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt = Doctrine_Query::create()
                    ->select('COUNT(DISTINCT t.id_trajet) AS nb_trajet_cond')
                    ->from('Trajet t, Covoitureur c')
                    ->where('t.id_utilisateur = c.id_utilisateur');
            ;
        } else {
            $qt = Doctrine_Query::create()
                    ->select('COUNT(DISTINCT t.id_trajet) AS nb_trajet_cond')
                    ->from('Trajet t')
            ;
        }

        $qt->andWhere('t.etat = 1 ');
        $qt->andWhere('t.id_type_trajet = 2');
        $qt->andWhere('t.jour_unique_type_cov != 2');
        $qt->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $qt->andWhere('t.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $qt->andWhere('t.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $qt->andWhere('t.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt->andWhereIn('c.cp_etablissement_id', $etab);
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($groupeStat, $groupeStat));
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($communauteCommune, $communauteCommune));
        }

        $trajet = $qt->fetchArray();

        return $trajet[0]['nb_trajet_cond'];
    }

    //nombre de trajets passager => trajets occasionnels
    public function getStatTrajetNbPassOcc($dateDeb = null, $dateFin = null, $etab = null, $groupeStat = null, $communauteCommune = null) {
        /*
          $qt = Doctrine_Query::create()
          ->select('COUNT(DISTINCT t.id_trajet) AS nb_trajet_pass')
          ->from('Trajet t')
          ->where('t.etat = 1 ')
          ->andWhere('t.id_type_trajet = 2')
          ->andWhere('t.jour_unique_type_cov = 2')
          ->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));
         */


        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt = Doctrine_Query::create()
                    ->select('COUNT(DISTINCT t.id_trajet) AS nb_trajet_pass')
                    ->from('Trajet t, Covoitureur c')
                    ->where('t.id_utilisateur = c.id_utilisateur');
            ;
        } else {
            $qt = Doctrine_Query::create()
                    ->select('COUNT(DISTINCT t.id_trajet) AS nb_trajet_pass')
                    ->from('Trajet t')
            ;
        }

        $qt->andWhere('t.etat = 1 ');
        $qt->andWhere('t.id_type_trajet = 2');
        $qt->andWhere('t.jour_unique_type_cov != 2');
        $qt->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $qt->andWhere('t.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $qt->andWhere('t.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $qt->andWhere('t.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt->andWhereIn('c.cp_etablissement_id', $etab);
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($groupeStat, $groupeStat));
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($communauteCommune, $communauteCommune));
        }

        $trajet = $qt->fetchArray();

        return $trajet[0]['nb_trajet_pass'];
    }

    //nombre de trajets conducteur et indifférents => trajets réguliers
    public function getStatTrajetNbCondReg($dateDeb = null, $dateFin = null, $etab = null, $groupeStat = null, $communauteCommune = null) {
        /*
          $qt = Doctrine_Query::create()
          ->select('COUNT(DISTINCT t.id_trajet) AS nb_trajet_cond')
          ->from('Trajet t')
          ->where('t.etat = 1 ')
          ->andWhere('t.id_type_trajet = 1')
          ->andWhere('(t.lundi_type_cov != 2 AND t.lundi_etat = 1)
          OR (t.mardi_type_cov != 2 AND t.mardi_etat = 1)
          OR (t.mercredi_type_cov != 2 AND t.mercredi_etat = 1)
          OR (t.jeudi_type_cov != 2 AND t.jeudi_etat = 1)
          OR (t.vendredi_type_cov != 2 AND t.vendredi_etat = 1)
          OR (t.samedi_type_cov != 2 AND t.samedi_etat = 1)
          OR (t.dimanche_type_cov != 2 AND t.dimanche_etat = 1)')
          ->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));
         */

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt = Doctrine_Query::create()
                    ->select('COUNT(DISTINCT t.id_trajet) AS nb_trajet_cond')
                    ->from('Trajet t, Covoitureur c')
                    ->where('t.id_utilisateur = c.id_utilisateur');
            ;
        } else {
            $qt = Doctrine_Query::create()
                    ->select('COUNT(DISTINCT t.id_trajet) AS nb_trajet_cond')
                    ->from('Trajet t')
            ;
        }

        $qt->andWhere('t.etat = 1 ');
        $qt->andWhere('t.id_type_trajet = 1');
        $qt->andWhere('(t.lundi_type_cov != 2 AND t.lundi_etat = 1)
                OR (t.mardi_type_cov != 2 AND t.mardi_etat = 1)
                OR (t.mercredi_type_cov != 2 AND t.mercredi_etat = 1)
                OR (t.jeudi_type_cov != 2 AND t.jeudi_etat = 1)
                OR (t.vendredi_type_cov != 2 AND t.vendredi_etat = 1)
                OR (t.samedi_type_cov != 2 AND t.samedi_etat = 1)
                OR (t.dimanche_type_cov != 2 AND t.dimanche_etat = 1)');
        $qt->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $qt->andWhere('t.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $qt->andWhere('t.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $qt->andWhere('t.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt->andWhereIn('c.cp_etablissement_id', $etab);
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($groupeStat, $groupeStat));
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($communauteCommune, $communauteCommune));
        }


        $trajet = $qt->fetchArray();

        return $trajet[0]['nb_trajet_cond'];
    }

    //nombre de trajets passager => trajets réguliers
    public function getStatTrajetNbPassReg($dateDeb = null, $dateFin = null, $etab = null, $groupeStat = null, $communauteCommune = null) {
        /*
          $qt = Doctrine_Query::create()
          ->select('COUNT(DISTINCT t.id_trajet) AS nb_trajet_pass')
          ->from('Trajet t')
          ->where('t.etat = 1 ')
          ->andWhere('t.id_type_trajet = 1')
          ->andWhere('(t.lundi_type_cov = 2 AND t.lundi_etat = 1)
          OR (t.mardi_type_cov = 2 AND t.mardi_etat = 1)
          OR (t.mercredi_type_cov = 2 AND t.mercredi_etat = 1)
          OR (t.jeudi_type_cov = 2 AND t.jeudi_etat = 1)
          OR (t.vendredi_type_cov = 2 AND t.vendredi_etat = 1)
          OR (t.samedi_type_cov = 2 AND t.samedi_etat = 1)
          OR (t.dimanche_type_cov = 2 AND t.dimanche_etat = 1)')
          ->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));
         */

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt = Doctrine_Query::create()
                    ->select('COUNT(DISTINCT t.id_trajet) AS nb_trajet_pass')
                    ->from('Trajet t, Covoitureur c')
                    ->where('t.id_utilisateur = c.id_utilisateur');
            ;
        } else {
            $qt = Doctrine_Query::create()
                    ->select('COUNT(DISTINCT t.id_trajet) AS nb_trajet_pass')
                    ->from('Trajet t')
            ;
        }

        $qt->andWhere('t.etat = 1 ');
        $qt->andWhere('t.id_type_trajet = 1');
        $qt->andWhere('(t.lundi_type_cov = 2 AND t.lundi_etat = 1)
                OR (t.mardi_type_cov = 2 AND t.mardi_etat = 1)
                OR (t.mercredi_type_cov = 2 AND t.mercredi_etat = 1)
                OR (t.jeudi_type_cov = 2 AND t.jeudi_etat = 1)
                OR (t.vendredi_type_cov = 2 AND t.vendredi_etat = 1)
                OR (t.samedi_type_cov = 2 AND t.samedi_etat = 1)
                OR (t.dimanche_type_cov = 2 AND t.dimanche_etat = 1)');
        $qt->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $qt->andWhere('t.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $qt->andWhere('t.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $qt->andWhere('t.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt->andWhereIn('c.cp_etablissement_id', $etab);
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($groupeStat, $groupeStat));
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($communauteCommune, $communauteCommune));
        }

        $trajet = $qt->fetchArray();

        return $trajet[0]['nb_trajet_pass'];
    }

    //nombre de trajets par évènements
    public function getStatTrajetNbEvnmt($dateDeb = null, $dateFin = null, $etab = null, $groupeStat = null, $communauteCommune = null) {
        /*
          $qt = Doctrine_Query::create()
          ->select('COUNT(DISTINCT t.id_trajet) AS nb_evenmt')
          ->from('Trajet t')
          ->where('t.etat = 1 ')
          ->andWhere('t.id_evenement != 0 ')
          ->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));
         */

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt = Doctrine_Query::create()
                    ->select('COUNT(DISTINCT t.id_trajet) AS nb_evenmt')
                    ->from('Trajet t, Covoitureur c')
                    ->where('t.id_utilisateur = c.id_utilisateur');
            ;
        } else {
            $qt = Doctrine_Query::create()
                    ->select('COUNT(DISTINCT t.id_trajet) AS nb_evenmt')
                    ->from('Trajet t')
            ;
        }

        $qt->andWhere('t.etat = 1 ');
        $qt->andWhere('t.id_evenement != 0 ');
        $qt->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $qt->andWhere('t.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $qt->andWhere('t.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $qt->andWhere('t.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt->andWhereIn('c.cp_etablissement_id', $etab);
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($groupeStat, $groupeStat));
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($communauteCommune, $communauteCommune));
        }

        $trajet = $qt->fetchArray();

        return $trajet[0]['nb_evenmt'];
    }

    //nombre de trajets par ZI
    public function getStatTrajetNbZi($dateDeb = null, $dateFin = null, $etab = null, $groupeStat = null, $communauteCommune = null) {
        /*
          $qt = Doctrine_Query::create()
          ->select('COUNT(DISTINCT t.id_trajet) AS nb_zi')
          ->from('Trajet t')
          ->where('t.etat = 1 ')
          ->andWhere('t.depart_autre_lieu is not null ')
          ->andWhere('t.destination_autre_lieu is not null ')
          ->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));
         */

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt = Doctrine_Query::create()
                    ->select('COUNT(DISTINCT t.id_trajet) AS nb_zi')
                    ->from('Trajet t, Covoitureur c')
                    ->where('t.id_utilisateur = c.id_utilisateur')
            ;
        } else {
            $qt = Doctrine_Query::create()
                    ->select('COUNT(DISTINCT t.id_trajet) AS nb_zi')
                    ->from('Trajet t')
            ;
        }

        $qt->andWhere('t.etat = 1 ');
        $qt->andWhere('t.depart_autre_lieu is not null ');
        $qt->andWhere('t.destination_autre_lieu is not null ');
        $qt->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $qt->andWhere('t.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $qt->andWhere('t.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $qt->andWhere('t.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt->andWhereIn('c.cp_etablissement_id', $etab);
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($groupeStat, $groupeStat));
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($communauteCommune, $communauteCommune));
        }

        $trajet = $qt->fetchArray();

        return $trajet[0]['nb_zi'];
    }

    //top x des villes de départ
    public function getStatTopDepart($dateDeb = null, $dateFin = null, $nbTrajet = null, $etab = null, $groupeStat = null, $communauteCommune = null) {

        $q = Doctrine_Query::create()
                ->select('t.depart_ville,count(*) as nb_ville ')
                ->from('Trajet t, Covoitureur c')
                ->where('t.id_site = ?', sfConfig::get('sf_id_site_client'))
                ->andWhere('t.id_utilisateur = c.id_utilisateur')
                ->andWhere('t.id_depart != 0')
                ->andWhere('!isnull(t.depart_ville) AND t.depart_ville !="" ')
                ->groupBy('t.depart_ville')
                ->limit(sfConfig::get('app_stat_nb_ville'))
                ->orderBy('nb_ville DESC')
        ;



        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $q->andWhere('t.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $q->andWhere('t.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $q->andWhere('t.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $q->andWhereIn('c.cp_etablissement_id', $etab);
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $q->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($groupeStat, $groupeStat));
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $q->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($communauteCommune, $communauteCommune));
        }

        $trajets = $q->execute();

        $tabTrajetVilleDepart = array();

        foreach ($trajets as $trajet) {
            //calcul du %
            if ($nbTrajet != 0) {
                $nbPourCent = ($trajet->getNbVille() * 100) / $nbTrajet;
                $tabTrajetVilleDepart[$trajet->getDepartVille()] = $nbPourCent;
            } else {
                $tabTrajetVilleDepart[$trajet->getDepartVille()] = 0;
            }
        }

        return $tabTrajetVilleDepart;
    }

    //top x des villes de destination
    public function getStatTopDestination($dateDeb = null, $dateFin = null, $nbTrajet = null, $etab = null, $groupeStat = null, $communauteCommune = null) {

        $q = Doctrine_Query::create()
                ->select('t.destination_ville,count(*) as nb_ville ')
                ->from('Trajet t, Covoitureur c')
                ->where('t.id_site = ?', sfConfig::get('sf_id_site_client'))
                ->andWhere('t.id_utilisateur = c.id_utilisateur')
                ->andWhere('t.id_destination != 0')
                ->andWhere('!isnull(t.destination_ville) AND t.destination_ville !="" ')
                ->groupBy('t.destination_ville')
                ->limit(sfConfig::get('app_stat_nb_ville'))
                ->orderBy('nb_ville DESC')
        ;



        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $q->andWhere('t.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $q->andWhere('t.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $q->andWhere('t.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $q->andWhereIn('c.cp_etablissement_id', $etab);
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $q->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($groupeStat, $groupeStat));
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $q->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($communauteCommune, $communauteCommune));
        }

        $trajets = $q->execute();

        $tabTrajetVilleDest = array();

        foreach ($trajets as $trajet) {
            //calcul du %
            if ($nbTrajet != 0) {
                $nbPourCent = ($trajet->getNbVille() * 100) / $nbTrajet;
                $tabTrajetVilleDest[$trajet->getDestinationVille()] = $nbPourCent;
            } else {
                $tabTrajetVilleDest[$trajet->getDestinationVille()] = 0;
            }
        }

        return $tabTrajetVilleDest;
    }

    //top x des lieux de depart
    public function getStatTopLieuDepart($dateDeb = null, $dateFin = null, $nbTrajet = null, $etab = null, $groupeStat = null, $communauteCommune = null) {

        $q = Doctrine_Query::create()
                ->select('t.depart_autre_lieu, count(*) as nb_ville ')
                ->from('Trajet t, Covoitureur c')
                ->where('t.id_site = ?', sfConfig::get('sf_id_site_client'))
                ->andWhere('t.id_utilisateur = c.id_utilisateur')
                ->andWhere('t.depart_autre_lieu != 0 AND t.depart_autre_lieu !="" AND !isnull(t.depart_autre_lieu)')
                ->groupBy('t.depart_autre_lieu')
                ->limit(sfConfig::get('app_stat_nb_ville'))
                ->orderBy('nb_ville DESC')
        ;



        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $q->andWhere('t.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $q->andWhere('t.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $q->andWhere('t.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $q->andWhereIn('c.cp_etablissement_id', $etab);
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $q->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($groupeStat, $groupeStat));
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $q->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($communauteCommune, $communauteCommune));
        }

        $trajets = $q->execute();

        $tabTrajetLieuDepart = array();

        foreach ($trajets as $trajet) {
            //calcul du %
            if ($nbTrajet != 0) {
                $nbPourCent = ($trajet->getNbVille() * 100) / $nbTrajet;
                $tabTrajetLieuDepart[$trajet->getDepartLieu()] = $nbPourCent;
            } else {
                $tabTrajetLieuDepart[$trajet->getDepartLieu()] = 0;
            }
        }

        return $tabTrajetLieuDepart;
    }
    
    public function getStatTopLieuDepart1($dateDeb = null, $dateFin = null, $nbTrajet = null, $etab = null, $groupeStat = null, $communauteCommune = null) {
        
        $q = Doctrine_Query::create()
                ->select('t.depart_autre_lieu, count(*) as nb_ville ')
                ->from('Trajet t, Covoitureur c')
                ->where('t.id_site = ?', sfConfig::get('sf_id_site_client'))
                ->andWhere('t.id_utilisateur = c.id_utilisateur')
                ->andWhere('t.depart_autre_lieu != 0 AND t.depart_autre_lieu !="" AND !isnull(t.depart_autre_lieu)')
                ->groupBy('t.depart_autre_lieu')
                ->limit(sfConfig::get('app_stat_nb_ville'))
                ->orderBy('nb_ville DESC')
        ;



        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $q->andWhere('t.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $q->andWhere('t.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $q->andWhere('t.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $q->andWhereIn('c.cp_etablissement_id', $etab);
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $q->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($groupeStat, $groupeStat));
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $q->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($communauteCommune, $communauteCommune));
        }

        $trajets = $q->execute();

        $tabTrajetLieuDepart = array();
        $tabTrajetLieuDepart1 = array();
        
        $nbPourCent = 0;

        foreach ($trajets as $trajet) {
            //calcul du %
            //if()
            if ($nbTrajet != 0 && $nbTrajet != null) {
                $nbPourCent = ($trajet->getNbVille() * 100) / $nbTrajet;
                $tabTrajetLieuDepart[$trajet->getDepartLieu()] = $nbPourCent;
                //$tabTrajetLieuDepart['test'] = $nbPourCent;
            } else {
                $tabTrajetLieuDepart[$trajet->getDepartLieu()] = 0;
            }
        }
        
        
        $tabTrajetLieuDepart1 = array();
        return $tabTrajetLieuDepart1;
    }

    //top x des lieux de destination
    public function getStatTopLieuDest($dateDeb = null, $dateFin = null, $nbTrajet = null, $etab = null, $groupeStat = null, $communauteCommune = null) {

        $q = Doctrine_Query::create()
                ->select('t.destination_autre_lieu, count(*) as nb_ville ')
                ->from('Trajet t, Covoitureur c')
                ->where('t.id_site = ?', sfConfig::get('sf_id_site_client'))
                ->andWhere('t.id_utilisateur = c.id_utilisateur')
                ->andWhere('t.destination_autre_lieu != 0 AND t.destination_autre_lieu !="" AND !isnull(t.destination_autre_lieu)')
                ->groupBy('t.destination_autre_lieu')
                ->limit(sfConfig::get('app_stat_nb_ville'))
                ->orderBy('nb_ville DESC')
        ;



        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $q->andWhere('t.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $q->andWhere('t.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $q->andWhere('t.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $q->andWhereIn('c.cp_etablissement_id', $etab);
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $q->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($groupeStat, $groupeStat));
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $q->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($communauteCommune, $communauteCommune));
        }

        $trajets = $q->execute();

        $tabTrajetLieuDest = array();

        foreach ($trajets as $trajet) {
            //calcul du %
            if ($nbTrajet != 0) {
                $nbPourCent = ($trajet->getNbVille() * 100) / $nbTrajet;
                $tabTrajetLieuDest[$trajet->getDestinationLieu()] = $nbPourCent;
            } else {
                $tabTrajetLieuDest[$trajet->getDestinationLieu()] = 0;
            }
        }

        return $tabTrajetLieuDest;
    }

    /*     * ********************************************************************* */
    /*         Methodes pour les statistiques Environnementales             */
    /*     * ********************************************************************* */

    //distance totale des trajets uniques proposés  aller
    public function getStatTrajetDistA($dateDeb = null, $dateFin = null, $etab = null, $groupeStat = null, $communauteCommune = null) {
        /*
          $qt = Doctrine_Query::create()
          ->select('SUM(km) AS sum_trajetUniqueAlle')
          ->from('Trajet t')
          ->where('jour_unique_date <> \'0000-00-00 00:00:00\'')
          ->andWhere('depart_latitude IS NOT NULL OR depart_longitude IS NOT NULL OR destination_latitude IS NOT NULL OR destination_longitude IS NOT NULL')
          ->andWhere('etat = 1')
          ->andWhere('id_type_trajet = 2')
          ->andWhere('jour_unique_retour = 0')
          ->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));
         */

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt = Doctrine_Query::create()
                    ->select('SUM(km) AS sum_trajetUniqueAlle')
                    ->from('Trajet t, Covoitureur c')
                    ->where('t.id_utilisateur = c.id_utilisateur');
            ;
        } else {
            $qt = Doctrine_Query::create()
                    ->select('SUM(km) AS sum_trajetUniqueAlle')
                    ->from('Trajet t')
            ;
        }



        $qt->andWhere('jour_unique_date <> \'0000-00-00 00:00:00\'');
        $qt->andWhere('depart_latitude IS NOT NULL OR depart_longitude IS NOT NULL OR destination_latitude IS NOT NULL OR destination_longitude IS NOT NULL');
        $qt->andWhere('t.etat = 1 ');
        $qt->andWhere('id_type_trajet = 2');
        $qt->andWhere('jour_unique_retour = 0');
        $qt->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $qt->andWhere('t.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $qt->andWhere('t.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $qt->andWhere('t.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt->andWhereIn('c.cp_etablissement_id', $etab);
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($groupeStat, $groupeStat));
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($communauteCommune, $communauteCommune));
        }

        $trajet = $qt->fetchArray();

        return $trajet[0]['sum_trajetUniqueAlle'];
    }

    //distance totale des trajets uniques proposés  aller et retour
    public function getStatTrajetDistAR($dateDeb = null, $dateFin = null, $etab = null, $groupeStat = null, $communauteCommune = null) {
        /*
          $qt = Doctrine_Query::create()
          ->select('SUM(km) AS sum_trajetUniqueAlleRetour')
          ->from('Trajet t')
          ->where('jour_unique_date <> \'0000-00-00 00:00:00\'')
          ->andWhere('depart_latitude IS NOT NULL OR depart_longitude IS NOT NULL OR destination_latitude IS NOT NULL OR destination_longitude IS NOT NULL')
          ->andWhere('etat = 1')
          ->andWhere('id_type_trajet = 2')
          ->andWhere('jour_unique_retour = 1')
          ->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));
         */

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt = Doctrine_Query::create()
                    ->select('SUM(km) AS sum_trajetUniqueAlleRetour')
                    ->from('Trajet t, Covoitureur c')
                    ->where('t.id_utilisateur = c.id_utilisateur');
            ;
        } else {
            $qt = Doctrine_Query::create()
                    ->select('SUM(km) AS sum_trajetUniqueAlleRetour')
                    ->from('Trajet t')
            ;
        }

        $qt->andWhere('jour_unique_date <> \'0000-00-00 00:00:00\'');
        $qt->andWhere('depart_latitude IS NOT NULL OR depart_longitude IS NOT NULL OR destination_latitude IS NOT NULL OR destination_longitude IS NOT NULL');
        $qt->andWhere('t.etat = 1 ');
        $qt->andWhere('id_type_trajet = 2');
        $qt->andWhere('jour_unique_retour = 1');
        $qt->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $qt->andWhere('t.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $qt->andWhere('t.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $qt->andWhere('t.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt->andWhereIn('c.cp_etablissement_id', $etab);
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($groupeStat, $groupeStat));
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($communauteCommune, $communauteCommune));
        }

        $trajet = $qt->fetchArray();

        return $trajet[0]['sum_trajetUniqueAlleRetour'];
    }

    //distance totale des trajets REGULIERS uniques proposés  aller
    public function getStatTrajetRegulDistA($dateDeb = null, $dateFin = null, $etab = null, $groupeStat = null, $communauteCommune = null) {

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt = Doctrine_Query::create()
                    ->select('SUM(km) AS sum_trajetRegulierAlle')
                    ->from('Trajet t, Covoitureur c')
                    ->where('t.id_utilisateur = c.id_utilisateur');
            ;
        } else {
            $qt = Doctrine_Query::create()
                    ->select('SUM(km) AS sum_trajetRegulierAlle')
                    ->from('Trajet t')
            ;
        }

        $qt->andWhere('t.etat = 1 ');
        $qt->andWhere('id_type_trajet = 1');
        $qt->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $qt->andWhere('t.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $qt->andWhere('t.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $qt->andWhere('t.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt->andWhereIn('c.cp_etablissement_id', $etab);
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($groupeStat, $groupeStat));
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($communauteCommune, $communauteCommune));
        }

        $trajet = $qt->fetchArray();

        return $trajet[0]['sum_trajetRegulierAlle'];
    }

    //distance totale des trajets REGULIERS proposés  aller et retour
    public function getStatTrajetRegulDistAR($dateDeb = null, $dateFin = null, $etab = null, $groupeStat = null, $communauteCommune = null) {

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt = Doctrine_Query::create()
                    ->select('SUM(km) AS sum_trajetRegulierAlleRetour')
                    ->from('Trajet t, Covoitureur c')
                    ->where('t.id_utilisateur = c.id_utilisateur');
            ;
        } else {
            $qt = Doctrine_Query::create()
                    ->select('SUM(km) AS sum_trajetRegulierAlleRetour')
                    ->from('Trajet t')
            ;
        }

        $qt->andWhere('t.etat = 1 ');
        $qt->andWhere('id_type_trajet = 1');
        $qt->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $qt->andWhere('t.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $qt->andWhere('t.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $qt->andWhere('t.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt->andWhereIn('c.cp_etablissement_id', $etab);
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($groupeStat, $groupeStat));
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($communauteCommune, $communauteCommune));
        }

        $trajet = $qt->fetchArray();

        return $trajet[0]['sum_trajetRegulierAlleRetour'];
    }

    //recuperation des statistiques envirronnementales
    // recuperation du nombre de km parcourus en covoiturage
    public function getStatCo2Evite($dateDeb = null, $dateFin = null, $etab = null, $groupeStat = null, $communauteCommune = null) {
        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt = Doctrine_Query::create()
                    ->select('t.km, t.id_equipage,count(*) as nb_trajet')
                    ->from('Trajet t, Covoitureur c')
                    ->where('t.id_utilisateur = c.id_utilisateur');
            ;
        } else {
            $qt = Doctrine_Query::create()
                    ->select('t.km, t.id_equipage,count(*) as nb_trajet')
                    ->from('Trajet t')
            ;
        }

        //$qt->andWhere('jour_unique_date <> \'0000-00-00 00:00:00\'');
        //$qt->andWhere('depart_latitude IS NOT NULL OR depart_longitude IS NOT NULL OR destination_latitude IS NOT NULL OR destination_longitude IS NOT NULL');
        $qt->andWhere('t.etat = 1 ');
        $qt->andWhere('id_type_trajet = 1');
        //$qt->andWhere('jour_unique_retour = 1');
        $qt->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $qt->andWhere('t.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $qt->andWhere('t.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $qt->andWhere('t.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $qt->andWhereIn('c.cp_etablissement_id', $etab);
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($groupeStat, $groupeStat));
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$qt->andWhereIn('t.id_depart', $groupeStat);
            $qt->andWhere('t.id_depart IN ? OR t.id_destination IN ? ', array($communauteCommune, $communauteCommune));
        }

        $qt->groupBy('t.id_equipage');
        $qt->having('t.id_equipage != 0 AND t.id_equipage is not null');

        //$trajet = $qt->fetchArray();

        $trajets = $qt->execute();

        $tabTrajetLieuDest = array();

        //initialisation des valeur de comptage partielle
        $km_part = 0;
        $compt_trajet_part = 0;

        //initialisation du compteur totale (de km)
        $compt_total_km = 0;

        foreach ($trajets as $trajet) {

            $km_part = $trajet->getKm();
            $compt_trajet_part = $trajet->getNbTrajet();
            $compt_total_km += ($km_part * ($compt_trajet_part - 1));
        }

        return $compt_total_km;
    }

    /*     * ********************************************************************* */
    /*         Methodes liées aux équipages                                        */
    /*     * ********************************************************************* */

    /*
     * récupération des trajets liés à un 'équipage 
     *  SANS les trajets de l'utilisateur passé en argument
     * @param  Equipage $id_equipage  id de l'equipage
     * @param  User     $id_utilisateur     utilisateur concerné.
     *
     * @return query      requete exécutée
     * 
     */

    public function getEquipageListeTrajet($id_equipage = null, $id_utilisateur = null) {

        $q = Doctrine_Query::create()
                ->from('Trajet t')
                ->where('t.id_equipage = ?', $id_equipage)
                ->andWhere('t.id_utilisateur != ?', $id_utilisateur)
        ;

        return $q->execute();
    }

    /*
     * récupération des trajets liés à un covoitureur 
     * @param  User     $id_utilisateur     utilisateur concerné.
     *
     * @return query      requete exécutée
     * 
     */

    public function getEquipageListeTrajetCovoitureur($id_utilisateur = null) {

        $q = Doctrine_Query::create()
                ->from('Trajet t')
                ->where('t.id_utilisateur = ?', $id_utilisateur)
                ->andWhere('t.id_equipage != 0')
        ;

        return $q->execute();
    }

    /*
     * récupération du trajets liés à un 'équipage  et à un covoitureur
     * @param  Equipage $id_equipage  id de l'equipage
     * @param  User     $id_utilisateur     utilisateur concerné.
     *
     * @return query      requete retourne un unique enregistrement
     * 
     */

    public function getEquipageMonTrajet($id_equipage = null, $id_utilisateur = null) {

        if ($id_equipage == null || $id_utilisateur == null) {
            return null;
        }

        $q = Doctrine_Query::create()
                ->from('Trajet t')
                ->where('t.id_equipage = ?', $id_equipage)
                ->andWhere('t.id_utilisateur = ?', $id_utilisateur)
                ->fetchOne()
        ;

        return $q;
    }

    /*
     * récupération des trajets liés à un covoitureur sur la ville de départ
     * @param  ville     $id_depart     code Insee de la ville de depart.
     *
     * @return query      requete exécutée
     * 
     */

    public function getEquipageListeTrajetVilleDepart($id_depart = null) {

        if ($id_depart == null) {
            return null;
        }

        $q = Doctrine_Query::create()
                ->from('Trajet t')
                ->where('t.id_depart = ?', $id_depart)
                ->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'))
                ->andWhere('t.id_equipage != 0')
        ;

        return $q->execute();
    }
    
    /*
     * récupération des trajets liés à un covoitureur sur la ville de destination
     * @param  ville     $id_depart     code Insee de la ville de depart.
     *
     * @return query      requete exécutée
     * 
     */

    public function getEquipageListeTrajetVilleDest($id_dest = null) {

        if ($id_dest == null) {
            return null;
        }

        $q = Doctrine_Query::create()
                ->from('Trajet t')
                ->where('t.id_destination = ?', $id_dest)
                ->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'))
                ->andWhere('t.id_equipage != 0')
        ;

        return $q->execute();
    }

    /*
     * retourne la liste de id de cp trajet pour un utilisateur (covoitureur)
     */
    public function getListeTrajetCovoitureur($id_utilisateur = null){
       if($id_utilisateur != null){
           $q = Doctrine_Query::create()
                ->select('t.* ')
                ->from('Trajet t')
                ->where('t.id_site = ?', sfConfig::get('sf_id_site_client'))
                ->andWhere('t.id_utilisateur = ?',$id_utilisateur)

            ;



            $trajets = $q->execute();

            $tabCpTrajetId = array();

            foreach ($trajets as $trajet) {

                    $tabCpTrajetId[$trajet->getCpTrajetId()] =  $trajet->getCpTrajetId();

            }

            return $tabCpTrajetId;
       }else{

           return null;
       }


    }

    /*
     * récupération des covoitureurs liés à un équipage
     * @param  Equipage     $id_equipage     equipage concerné.
     *
     * @return query        requete exécutée
     *
     */

    public function getEquipageListeCovoitureur($id_equipage = null) {

        /*
        $q = Doctrine_Query::create()
                ->select('t.id_trajet, c.nom as cov_nom, c.prenom as cov_prenom')
                ->from('Trajet t, Covoitureur c')
                ->where('t.id_equipage = ?', $id_equipage)
                ->andWhere('c.id_utilisateur = t.id_utilisateur')
        ;
         *
         */
        $q = Doctrine_Query::create()
                ->select('t.id_trajet, c.nom as cov_nom, c.prenom as cov_prenom')
                ->from('Trajet t')
                ->leftJoin('t.Covoitureur c')
                ->where('t.id_equipage = ?', $id_equipage)
                //->andWhere('c.id_utilisateur = t.id_utilisateur')
        ;

        return $q->execute();
    }
    
    /*
     * récupération des trajets liés à une ville de départ et une ville de destination pour le jour courant
     * @param  ville     $villeDepart           code Insee de la ville de depart.
     * @param  ville     $villeDestination      code Insee de la ville de destination.
     *
     * @return query      requete exécutée
     * 
     */

    public function getListeTrajetDuJour($villeDepart = null, $villeDestination = null) {

        if ($villeDepart == null || $villeDepart == null) {
            return null;
        }
        
        //attention les $villeDepart et $villeDestination ont en fait des information insee
        $departInsee = strtolower($villeDepart);
        $destinationInsee = strtolower($villeDestination);
        
        //!!! la recherche des trajet se fait sur la date du jour et sur la date du jour - 1 jour
        
        //recupération des trajets déposé ce jour
        $q = Doctrine_Query::create()
                ->from('Trajet t')
                ->where('t.depart_insee = ?', $departInsee)
                ->andWhere('t.destination_insee = ?', $destinationInsee)
                ->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'))
                ->andWhere('t.etat = 1')
                ->andWhere('(
                    DATE_FORMAT(date_creation,"%Y-%m-%d") = DATE_FORMAT(date_sub(NOW()),"%Y-%m-%d")
                    || DATE_FORMAT(date_creation,"%Y-%m-%d") = DATE_FORMAT(date_sub(NOW(),INTERVAL 1 DAY),"%Y-%m-%d")
                    || DATE_FORMAT(date_modification,"%Y-%m-%d") = DATE_FORMAT(date_sub(NOW()),"%Y-%m-%d")
                    || DATE_FORMAT(date_modification,"%Y-%m-%d") = DATE_FORMAT(date_sub(NOW(),INTERVAL 1 DAY),"%Y-%m-%d")
                    )')
        ;

        return $q->execute();
    }
    
    /*
     * récupération des trajets du jour supprimés (etat à 0 et/ou actif = 0) qui font partie d'un équipage
     *
     * @return query      requete exécutée
     * 
     */

    public function getListeTrajetSupprimeDuJour() {

        //!!! la recherche des trajet se fait sur la date du jour et sur la date du jour - 1 jour
        
        //recupération des trajets déposé ce jour
        $q = Doctrine_Query::create()
                ->from('Trajet t')
                ->where('(t.etat = 0 OR t.actif = 0)')
                ->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'))
                ->andWhere('(
                    DATE_FORMAT(date_modification,"%Y-%m-%d") = DATE_FORMAT(NOW(),"%Y-%m-%d")
                    || DATE_FORMAT(date_modification,"%Y-%m-%d") = DATE_FORMAT(date_sub(NOW(),INTERVAL 1 DAY),"%Y-%m-%d")
                    )')
                ->andWhere('(t.id_equipage != 0 AND t.id_equipage is not null)')
        ;

        return $q->execute();
    }
    
    /*
     * récupération des trajets actifs qui font partie d'un équipage
     *
     * @param   id_equipage     equipage
     * 
     * @param   id_trajet       trajet initial
     * 
     * @return query      requete exécutée
     * 
     */

    public function getListeTrajetAssocEquipage($id_equipage = null, $id_trajet = null) {

        
        //recupération des trajets associés à un équipage sans le trajet initial
        $q = Doctrine_Query::create()
                ->from('Trajet t')
                ->leftJoin('t.Covoitureur c')
                ->where('t.etat = 1 ')
                ->andWhere(' t.actif = 1')
                ->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'))
                ->andWhere('t.id_equipage = ?',$id_equipage)
                ->andWhere('t.id_trajet != ? ',$id_trajet)
        ;

        return $q->execute();
    }
    
    /*
     * récupération des trajets actifs qui font partie d'un équipage
     *
     * @param   id_equipage     equipage
     * 
     * @param   id_trajet       trajet initial
     * 
     * @return query      requete exécutée
     * 
     */

    public function getListeTrajetAssocCovoitureur($id_utilisateur = null) {

        
        //recupération des trajets associés à un covoitureur
        $q = Doctrine_Query::create()
                ->from('Trajet t')
                ->where('t.id_site = ?', sfConfig::get('sf_id_site_client'))
                ->andWhere('t.id_utilisateur = ?',$id_utilisateur)
        ;

        return $q->execute();
    }
    
    
    /*
     * récupération des Covoitureurs en fonction de l'établissement (liste des inscrits)
     * avec visualisation des trajets de l'etat des trajets dans équipage
     */
    public  function getCovoitureurInscritEtb($id_etb = null) {

        $q = Doctrine_Query::create()
                ->select(' t.id_trajet as id_trajet, t.depart_ville as depart_ville, t.destination_ville as destination_ville,c.*')
                ->from('Trajet t')
                ->leftJoin('t.Covoitureur c')
                //->where('t.id_utilisateur = c.id_utilisateur')
                ->where('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                ->andWhere('c.cp_etablissement_id = ?', $id_etb)
                ;

        return $q;
    }

}