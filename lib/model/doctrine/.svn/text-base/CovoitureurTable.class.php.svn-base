<?php

/**
 * CovoitureurTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class CovoitureurTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object CovoitureurTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Covoitureur');
    }

    /*
     * filtrage des Covoitureurs en fonction du site (id_site)
     */

    public static function getCovoitureurSite(Doctrine_Query $q = null) {
        if (is_null($q)) {
            $q = Doctrine_Query::create()
                            ->from('Covoitureur c');
        }

        $q->addSelect('*');
        //$q->count('t.id_equipage as nb_equip');
        //$q->leftJoin('c.Trajet t');
        $q->andWhere('c.id_site_client = ?', sfConfig::get('sf_id_site_client'));
        //$q->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));
        $q->groupBy('c.id_utilisateur');
        $q->orderBy('c.date_creation DESC');

        return $q;
    }

    public static function getCovoitureurSiteExecute(Doctrine_Query $q = null) {
        if (is_null($q)) {
            $q = Doctrine_Query::create()
                            ->from('Covoitureur c');
        }

        $q->addSelect('*,COUNT(t.id_equipage) as nb_equip');
        //$q->count('t.id_equipage as nb_equip');
        $q->leftJoin('c.Trajet t');
        $q->andWhere('c.id_site_client = ?', sfConfig::get('sf_id_site_client'));
        //$q->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'));
        $q->groupBy('c.id_utilisateur');

        return $q->execute();
    }

    /*
     * liste les covoitureurs avec photos pour le site
     */

    public function getPhotoCovoitureurSite(Doctrine_Query $q = null) {
        if (is_null($q)) {
            $q = Doctrine_Query::create()
                            ->from('Covoitureur c');
        }

        $q->andWhere('c.etat_photo != 0');
        $q->andWhere('c.id_site_client = ?', sfConfig::get('sf_id_site_client'));

        return $q;
    }

    /*
     * création d'une requete à partir des éléments du
     * formulaire de recherche 'CovoitureurRechercheForm'
     *
     * Rechcrche sans equipage ni trajet
     */

    public function getCovoitureurRecherche($dateDebut = null, $dateFin = null, $mail = null, $ville = null, $rsa = null, $newsletter = null, $nom = null, $prenom = null,$execute = null) {

        $q = Doctrine_Query::create()
                        ->select('*')
                        ->from('Covoitureur c')
                        ->leftJoin('c.Trajet t')
                        ->where('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                        //->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'))        
                        ->andWhere('t.id_trajet IS NULL')
                        //->groupBy('c.id_utilisateur')
                        ->orderBy('c.date_creation DESC')
        ;
        //$q->addSelect('COUNT(t.id_equipage) as nb_equip');
        //$q->count('t.id_equipage as nb_equip');
        //$q->leftJoin('c.Trajet t');

        $alias = $q->getRootAlias();

        //recherche sur le mail du covoitureur
        if ($mail != '') {
            $aliasMail = $mail . '%';
            $q->andWhere($alias . '.mail LIKE ?', $aliasMail);
        }

        //recherche sur le nom du covoitureur
        if ($nom != '') {
            $aliasNom = $nom . '%';
            $q->andWhere('c.nom LIKE ?', $aliasNom);
        }
        
        //recherche sur le prenom du covoitureur
        if ($prenom != '') {
            $aliasPrenom = $prenom . '%';
            $q->andWhere('c.prenom LIKE ?', $aliasPrenom);
        }

        //recherche sur la date de création
        if ($dateDebut != '' || $dateFin != '') {
            if ($dateDebut != '' && $dateFin != '') {
                $q->andWhere('(' . $alias . '.date_creation BETWEEN ? AND ?)', array($dateDebut, $dateFin));
            } elseif ($dateDebut != '') {
                $q->andWhere($alias . '.date_creation >= ?', $dateDebut);
            } elseif ($dateFin != '') {
                $q->andWhere($alias . '.date_creation <= ?', $dateFin);
            }
        }

        //recherche sur la ville de départ
        if ($ville != '') {
            //récupération de la ville pour recherche sur le trajet
            //extraction des infos entre parentheses
            $outil = new Util();

            //ville départ
            $chaine = $outil->extractCpLibelle($ville);
            //$depVille = Doctrine_Core::getTable('VilleFr')->findOneByNomVille($chaine);

            $aliasDepVille = $chaine . '%';
            $q->andWhere($alias . '.ville LIKE ?', $aliasDepVille);
        }

        //recherche sur les bénéficiaires du RSA
        // rsa = 0 => non
        // rsa = 1 => oui
        // rsa = 2 => peu importe

        if ($rsa == 0 || $rsa == 1) {
            $q->andWhere($alias . '.rsa = ?', $rsa);
        }

        //recherche sur les destinataires de la newsletter
        // newsletter = 0 => non
        // newsletter = 1 => oui
        // newsletter = 2 => peu importe
        if ($newsletter == 0 || $newsletter == 1) {
            $q->andWhere($alias . '.newsletter = ?', $newsletter);
        }



        if ($execute == NULL) {
            return $q;
        } else {
            return $q->execute();
        }
    }

    /*
     * création d'une requete à partir des éléments du
     * formulaire de recherche 'CovoitureurRechercheForm'
     *
     * Rechcrche AVEC ou sans equipage et avec trajet
     */

    public function getCovoitureurRechercheTrajetEquipageOuNon($dateDebut = null, $dateFin = null, $mail = null, $ville = null, $rsa = null, $newsletter = null, $trajet = null, $equipage = null, $nom = null,$prenom = null, $execute = null) {

        $q = Doctrine_Query::create()
                        ->select('*')
                        ->from('Covoitureur c')
                        ->leftJoin('c.Trajet t')
                        ->where('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                        
                        //->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'))        
                         ->groupBy('c.id_utilisateur')
                        ->orderBy('c.date_creation DESC')
                        ;
        
        if ($trajet == 1) {
            $q->andWhere('t.id_trajet IS NOT NULL');
        };
        
        if ($equipage == 0) {
            $q->addSelect('sum(t.id_equipage) as sommeEq');                
            $q->having('sommeEq = 0 OR isnull(sommeEq)');
        } elseif ($equipage == 1) {
            $q->addSelect('sum(t.id_equipage) as sommeEq');                
            $q->having('sommeEq > 0 ');
        };
        
        

        $alias = $q->getRootAlias();

        //recherche sur le mail du covoitureur
        if ($mail != '') {
            $aliasMail = $mail . '%';
            $q->andWhere($alias . '.mail LIKE ?', $aliasMail);
        }

        //recherche sur le nom du covoitureur
        if ($nom != '') {
            $aliasNom = $nom . '%';
            $q->andWhere($alias . '.nom LIKE ?', $aliasNom);
        }
        
        //recherche sur le prenom du covoitureur
        if ($prenom != '') {
            $aliasPreom = $prenom . '%';
            $q->andWhere($alias . '.prenom LIKE ?', $aliasPreom);
        }

        //recherche sur la date de création
        if ($dateDebut != '' || $dateFin != '') {
            if ($dateDebut != '' && $dateFin != '') {
                $q->andWhere('(' . $alias . '.date_creation BETWEEN ? AND ?)', array($dateDebut, $dateFin));
            } elseif ($dateDebut != '') {
                $q->andWhere($alias . '.date_creation >= ?', $dateDebut);
            } elseif ($dateFin != '') {
                $q->andWhere($alias . '.date_creation <= ?', $dateFin);
            }
        }

        //recherche sur la ville de départ
        if ($ville != '') {
            //récupération de la ville pour recherche sur le trajet
            //extraction des infos entre parentheses
            $outil = new Util();

            //ville départ
            $chaine = $outil->extractCpLibelle($ville);
            //$depVille = Doctrine_Core::getTable('VilleFr')->findOneByNomVille($chaine);

            $aliasDepVille = $chaine . '%';
            $q->andWhere($alias . '.ville LIKE ?', $aliasDepVille);

            //$q->andWhere($alias . '.ville = ?', $aliasDepVille);
        }

        //recherche sur les bénéficiaires du RSA
        // rsa = 0 => non
        // rsa = 1 => oui
        // rsa = 2 => peu importe

        if ($rsa == 0 || $rsa == 1) {
            $q->andWhere($alias . '.rsa = ?', $rsa);
        }

        //recherche sur les destinataires de la newsletter
        // newsletter = 0 => non
        // newsletter = 1 => oui
        // newsletter = 2 => peu importe
        if ($newsletter == 0 || $newsletter == 1) {
            $q->andWhere($alias . '.newsletter = ?', $newsletter);
        }



        if ($execute == NULL) {
            return $q;
        } else {
            return $q->execute();
        }
    }
    
    
    /*
     * création d'une requete à partir des éléments du
     * formulaire de recherche 'CovoitureurRechercheForm'
     *
     * Rechcrche AVEC equipage et/ou trajet
     */

    public function getCovoitureurRechercheTrajetEquipage($dateDebut = null, $dateFin = null, $mail = null, $ville = null, $rsa = null, $newsletter = null, $trajet = null, $equipage = null, $nom = null, $execute = null) {

        $q = Doctrine_Query::create()
                        //->select('*, COUNT(t.id_trajet) AS nb_trajet,COUNT(t.id_equipage) as nb_equip')
        /*
                        ->select('*')
                        ->from('Covoitureur c, Trajet t')
                        //->from('Covoitureur c')
                        //->leftJoin('c.Trajet t')
                        ->where('c.id_utilisateur = t.id_utilisateur')
                        ->andWhere('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                        //->andWhere('t.id_equipage != 0 AND  (t.id_equipage is not null)')
                        ->groupBy('c.id_utilisateur')
                        ->orderBy('c.date_creation DESC')
                */
                        ->select('*')
                        ->from('Covoitureur c')

                        ->leftJoin('c.Trajet t')

                        ->where('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                        //->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'))

                        ->groupBy('c.id_utilisateur')
                        ->orderBy('c.date_creation DESC')
        ;

        /*
        if ($equipage == 0 || $equipage == 1) {
                            $q->leftJoin('c.Trajet t');
                        };
         * 
         */

        //$q->addSelect('COUNT(t.id_equipage) as nb_equip');
        //$q->count('t.id_equipage as nb_equip');
        //$q->leftJoin('c.Trajet t');
        $alias = $q->getRootAlias();

        //recherche sur le mail du covoitureur
        if ($mail != '') {
            $aliasMail = $mail . '%';
            $q->andWhere($alias . '.mail LIKE ?', $aliasMail);
        }

        //recherche sur le nom du covoitureur
        if ($nom != '') {
            $aliasNom = $nom . '%';
            $q->andWhere($alias . '.nom LIKE ?', $aliasNom);
        }

        //recherche sur la date de création
        if ($dateDebut != '' || $dateFin != '') {
            if ($dateDebut != '' && $dateFin != '') {
                $q->andWhere('(' . $alias . '.date_creation BETWEEN ? AND ?)', array($dateDebut, $dateFin));
            } elseif ($dateDebut != '') {
                $q->andWhere($alias . '.date_creation >= ?', $dateDebut);
            } elseif ($dateFin != '') {
                $q->andWhere($alias . '.date_creation <= ?', $dateFin);
            }
        }

        //recherche sur la ville de départ
        if ($ville != '') {
            //récupération de la ville pour recherche sur le trajet
            //extraction des infos entre parentheses
            $outil = new Util();

            //ville départ
            //$chaine = $outil->extractCpLibelle($ville);
            //$depVille = Doctrine_Core::getTable('VilleFr')->findOneByNomVille($chaine);

            $aliasDepVille = $ville . '%';
            $q->andWhere($alias . '.ville LIKE ?', $aliasDepVille);

            //$q->andWhere($alias . '.ville = ?', $aliasDepVille);
        }

        //recherche sur les bénéficiaires du RSA
        // rsa = 0 => non
        // rsa = 1 => oui
        // rsa = 2 => peu importe

        if ($rsa == 0 || $rsa == 1) {
            $q->andWhere($alias . '.rsa = ?', $rsa);
        }

        //recherche sur les destinataires de la newsletter
        // newsletter = 0 => non
        // newsletter = 1 => oui
        // newsletter = 2 => peu importe
        if ($newsletter == 0 || $newsletter == 1) {
            $q->andWhere($alias . '.newsletter = ?', $newsletter);
        }


        //recherche si équipagé
        
        if ($equipage == 0) {
            $q->andWhere('t.id_equipage = 0 OR (t.id_equipage is null)');
        } elseif($equipage == 1) {
            $q->andWhere('t.id_equipage != 0 AND (t.id_equipage is not null)');
        }
         

        //recherche si trajet déposé

        if ($trajet == 1) {
            $q->andWhere('t.id_trajet is not null');
            //$q->having('nb_trajet > 0');
        }elseif($trajet == 0){
            $q->andWhere('t.id_trajet is null');
        }


        if ($execute == NULL) {
            return $q;
        } else {
            return $q->execute();
        }
    }

    /*
     * création d'une requete à partir des éléments du
     * formulaire de recherche 'CovoitureurRechercheForm'
     *
     * Recherche SANS equipage mais avec trajet
     */

    public function getCovoitureurRechercheTrajetNonEquipage($dateDebut = null, $dateFin = null, $mail = null, $ville = null, $rsa = null, $newsletter = null, $trajet = null, $equipage = null, $nom = null, $execute = null) {


        //recuperation des utilisateurs ayant au nmoins un trajet equipagé
        $q0 = Doctrine_Query::create()
                        //->select('*, COUNT(t.id_trajet) AS nb_trajet,COUNT(t.id_equipage) as nb_equip')
                        ->select('distinct(id_utilisateur)')
                        ->from('Trajet t')
                        //->leftJoin('c.Trajet t')
                        ->where('t.id_equipage = 0 OR (t.id_equipage is  null)')
                        //->andWhere('!isnull(t.id_equipage)')
                        ->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'))

        ;

        //$trajets = $q0->execute();

        $tabEqCov = array();
        $trajets = $q0->fetchArray();
        /*
          foreach ($trajets[0] as $key => $value) {
          $tabEqCov[$value] = $value;
          }
         *
         */
        foreach ($trajets as $trajet) {
            $tabEqCov[$trajet['distinct']] = $trajet['distinct'];
        }


        $q = Doctrine_Query::create()
                        //->select('*, COUNT(t.id_trajet) AS nb_trajet,COUNT(t.id_equipage) as nb_equip')
                        ->select('*')
                        ->from('Covoitureur c, Trajet t')
                        //->leftJoin('c.Trajet t')
                        ->where('c.id_utilisateur = t.id_utilisateur')
                        ->andWhere('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                        //->andWhere('t.id_site = ?', sfConfig::get('sf_id_site_client'))
                        //->andWhere('t.id_equipage = 0 OR  (t.id_equipage is  null)')
                        ->groupBy('c.id_utilisateur')
                        ->orderBy('c.date_creation DESC')
        ;

        
        if (count($tabEqCov)) {
            $q->andWhereNotIn('c.id_utilisateur', $tabEqCov);
        }
         
        //$q->andWhereNotIn('c.id_utilisateur',$tabEqCov);
        //$q->addSelect('COUNT(t.id_equipage) as nb_equip');
        //$q->count('t.id_equipage as nb_equip');
        //$q->leftJoin('c.Trajet t');
        $alias = $q->getRootAlias();

        //recherche sur le mail du covoitureur
        if ($mail != '') {
            $aliasNomEquipage = $nomEquipage . '%';
            $q->andWhere($alias . '.mail LIKE ?', $aliasNomEquipage);
        }

        //recherche sur le nom du covoitureur
        if ($nom != '') {
            $aliasNom = $nom . '%';
            $q->andWhere($alias . '.nom LIKE ?', $aliasNom);
        }

        //recherche sur la date de création
        if ($dateDebut != '' || $dateFin != '') {
            if ($dateDebut != '' && $dateFin != '') {
                $q->andWhere('(' . $alias . '.date_creation BETWEEN ? AND ?)', array($dateDebut, $dateFin));
            } elseif ($dateDebut != '') {
                $q->andWhere($alias . '.date_creation >= ?', $dateDebut);
            } elseif ($dateFin != '') {
                $q->andWhere($alias . '.date_creation <= ?', $dateFin);
            }
        }

        //recherche sur la ville de départ
        if ($ville != '') {
            //récupération de la ville pour recherche sur le trajet
            //extraction des infos entre parentheses
            $outil = new Util();

            //ville départ
            //$chaine = $outil->extractCpLibelle($ville);
            //$depVille = Doctrine_Core::getTable('VilleFr')->findOneByNomVille($chaine);

            $aliasDepVille = $ville . '%';
            $q->andWhere($alias . '.ville LIKE ?', $aliasDepVille);

            $q->andWhere($alias . '.ville = ?', $aliasDepVille);
        }

        //recherche sur les bénéficiaires du RSA
        // rsa = 0 => non
        // rsa = 1 => oui
        // rsa = 2 => peu importe

        if ($rsa == 0 || $rsa == 1) {
            $q->andWhere($alias . '.rsa = ?', $rsa);
        }

        //recherche sur les destinataires de la newsletter
        // newsletter = 0 => non
        // newsletter = 1 => oui
        // newsletter = 2 => peu importe
        if ($newsletter == 0 || $newsletter == 1) {
            $q->andWhere($alias . '.newsletter = ?', $newsletter);
        }



        //recherche si trajet déposé
        /*
          if ($trajet == 1) {
          //$q->andWhere('COUNT(t.id_trajet) > 0');
          $q->having('nb_trajet > 0');
          }
         *
         */


        if ($execute == NULL) {
            return $q;
        } else {
            return $q->execute();
        }
    }

    /*
     * création d'une requete à partir des éléments du
     * formulaire de recherche 'CovoitureurIdentificationForm'
     * pour identifier un covoitureur
     *
     */

    public function getCovoitureurIdentification($mail = null, $password = null) {

        $q = Doctrine_Query::create()
                        ->from('Covoitureur c')
                        ->where('c.mail = ? AND c.mot_de_passe = ?', array($mail, $password))
                        ->andWhere('c.etat > 0 ')
        //->andWhere('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
        ;


        $covoitureur = $q->fetchArray();
        //$result = print_r($covoitureur);

        if (!$covoitureur) {
            return 0;
        } else {
            return $covoitureur[0]['id_utilisateur'];
        }


        //return $result;
    }

    /*
     * création d'une requete à partir des éléments du
     * formulaire de profil covoitureur
     * pour verifier que la modification de mail n'utilise pas un mail existant deja en base
     *
     */

    public function getCovoitureurProfilVerifMail($mail = null, $id_covoitureur = null) {

        $q = Doctrine_Query::create()
                        ->from('Covoitureur c')
                        ->where('c.mail = ? ', array($mail))
        //->andWhere('c.id_site_client = ?', sfConfig::get('sf_id_site_client'));
        ;

        if ($id_covoitureur != null) {
            $q->andWhere('c.id_utilisateur != ?', array($id_covoitureur));
        }


        $covoitureur = $q->fetchOne();
        //$result = print_r($covoitureur);

        if (!$covoitureur) {
            return 0;
        } else {
            return $covoitureur['id_utilisateur'];
        }


        //return $result;
    }

    /*
     * création d'une requete à partir des éléments du
     * formulaire de profil covoitureur
     * pour verifier que le mot de passe saisie est celui du covoitureur
     *
     */

    public function getCovoitureurProfilVerifMdp($mdp = null, $id_covoitureur = null) {

        $q = Doctrine_Query::create()
                        ->from('Covoitureur c')
                        ->where('c.mot_de_passe = ? ', $mdp)
        //->andWhere('c.id_site_client = ?', sfConfig::get('sf_id_site_client'));
        ;

        if ($id_covoitureur != null) {
            $q->andWhere('c.id_utilisateur != ?', $id_covoitureur);
        }


        $covoitureur = $q->fetchOne();
        //$result = print_r($covoitureur);

        if (!$covoitureur) {
            return 0;
        } else {
            return $covoitureur['id_utilisateur'];
        }


        //return $result;
    }

    /*
     * filtrage des Covoitureurs en fonction de l'établissement
     */

    public static function getCovoitureurEtb($id_etb = null) {

        $q = Doctrine_Query::create()
                        ->from('Covoitureur c')
                        ->where('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                        ->andWhere('c.cp_etablissement_id = ?', $id_etb);
        ;

        return $q;
    }

    
    /*
     * récupération des Covoitureurs en fonction de l'établissement (liste des inscrits)
     * avec visualisation des trajets de l'etat des trajets dans équipage
     */
    public  function getCovoitureurInscritEtb($id_etb = null) {

        $q = Doctrine_Query::create()
                ->select('c.*, t.id_trajet as id_trajet, t.depart_ville as depart_ville, t.destination_ville as destination_ville')
                ->from('Covoitureur c')
                ->leftJoin('c.Trajet t')
                ->where('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                ->andWhere('c.cp_etablissement_id = ?', $id_etb)
                ;

        return $q;
    }
    
    public  function getCovoitureurInscritEtbExe($id_etb = null) {

        $q = Doctrine_Query::create()
                ->select('c.*, t.id_trajet as id_trajet, t.depart_ville as depart_ville, t.destination_ville as destination_ville')
                ->from('Covoitureur c')
                ->leftJoin('c.Trajet t')
                ->where('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                ->andWhere('c.cp_etablissement_id = ?', $id_etb)
                ;

        return $q->execute();
    }



    /*     * ********************************************************************* */
    /*         Methodes pour les statistiques                               */
    /*     * ********************************************************************* */

    //nombre de covoitureurs
    public function getStatNbCovoitureur($dateDeb = null, $dateFin = null, $etab = null, $groupeStat = null, $communauteCommune = null) {

        $q = Doctrine_Query::create()
                        ->select('COUNT(DISTINCT c.id_utilisateur) AS nb_covoitureur')
                        ->from('Covoitureur c')
                        ->where('c.etat = 1 OR c.etat=13')
                        ->andWhere('c.id_site_client = ?', sfConfig::get('sf_id_site_client'));

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $q->andWhere('c.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $q->andWhere('c.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $q->andWhereIn('c.cp_etablissement_id', $etab);
            //$q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {

            $i = 0;
            $requ = '';
            foreach ($groupeStat as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$q->andWhere('c.ville IN ? ', array($communauteCommune));
            $i = 0;
            $requ = '';
            foreach ($communauteCommune as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        $covoitureur = $q->fetchArray();

        return $covoitureur[0]['nb_covoitureur'];
    }

    //nombre de covoitureurs femmes
    public function getStatNbCovoitureurFemme($dateDeb = null, $dateFin = null, $etab = null, $groupeStat = null, $communauteCommune = null) {

        $q = Doctrine_Query::create()
                        ->select('COUNT(DISTINCT c.id_utilisateur) AS nb_covoitureur')
                        ->from('Covoitureur c')
                        ->where('c.etat = 1 OR c.etat=13')
                        ->andWhere('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                        ->andWhere('sexe = 0')
        ;

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $q->andWhere('c.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $q->andWhere('c.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $q->andWhereIn('c.cp_etablissement_id', $etab);
            //$q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {

            $i = 0;
            $requ = '';
            foreach ($groupeStat as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$q->andWhere('c.ville IN ? ', array($communauteCommune));
            $i = 0;
            $requ = '';
            foreach ($communauteCommune as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        $covoitureur = $q->fetchArray();

        return $covoitureur[0]['nb_covoitureur'];
    }

    //nombre de covoitureurs hommes
    public function getStatNbCovoitureurHomme($dateDeb = null, $dateFin = null, $etab = null, $groupeStat = null, $communauteCommune = null) {

        $q = Doctrine_Query::create()
                        ->select('COUNT(DISTINCT c.id_utilisateur) AS nb_covoitureur')
                        ->from('Covoitureur c')
                        ->where('c.etat = 1 OR c.etat=13')
                        ->andWhere('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                        ->andWhere('sexe = 1')
        ;

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $q->andWhere('c.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $q->andWhere('c.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $q->andWhereIn('c.cp_etablissement_id', $etab);
            //$q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {

            $i = 0;
            $requ = '';
            foreach ($groupeStat as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$q->andWhere('c.ville IN ? ', array($communauteCommune));
            $i = 0;
            $requ = '';
            foreach ($communauteCommune as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        $covoitureur = $q->fetchArray();

        return $covoitureur[0]['nb_covoitureur'];
    }

    //nombre de covoitureurs bénéficiaires du RSA (en %)
    public function getStatNbCovoitureurRsa($dateDeb = null, $dateFin = null, $nbCovoitureur, $etab = null, $groupeStat = null, $communauteCommune = null) {

        $q = Doctrine_Query::create()
                        ->select('COUNT(DISTINCT c.id_utilisateur) AS nb_rsa')
                        ->from('Covoitureur c')
                        ->where(' c.rsa = 1 ')
                        ->andWhere('c.id_site_client = ?', sfConfig::get('sf_id_site_client'));

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $q->andWhere('c.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $q->andWhere('c.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $q->andWhereIn('c.cp_etablissement_id', $etab);
            //$q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {

            $i = 0;
            $requ = '';
            foreach ($groupeStat as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$q->andWhere('c.ville IN ? ', array($communauteCommune));
            $i = 0;
            $requ = '';
            foreach ($communauteCommune as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        $covoitureur = $q->fetchArray();

        if ($nbCovoitureur != 0) {
            return ($covoitureur[0]['nb_rsa'] * 100) / $nbCovoitureur;
        } else {
            return 0;
        }
    }

    /*     * *********************************************************** */

    //nombre de covoitureurs de Chez PSA
    public function getStatNbCovoitureurPsa($dateDeb = null, $dateFin = null, $groupeStat = null, $communauteCommune = null) {

        $q = Doctrine_Query::create()
                        ->select('COUNT(DISTINCT c.id_utilisateur) AS nb_rsa')
                        ->from('Covoitureur c')
                        ->where('c.id_site_site = ?', sfConfig::get('sf_id_site_peugeot'))
                        ->andWhere('c.id_site_client = ?', sfConfig::get('sf_id_site_client'));

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $q->andWhere('c.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $q->andWhere('c.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {

            $i = 0;
            $requ = '';
            foreach ($groupeStat as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$q->andWhere('c.ville IN ? ', array($communauteCommune));
            $i = 0;
            $requ = '';
            foreach ($communauteCommune as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        $covoitureur = $q->fetchArray();

        return $covoitureur[0]['nb_rsa'];
    }

    //répartition par equipe PSA
    public function getStatNbCovoitureurEquipePsa($dateDeb = null, $dateFin = null, $nbCovoitureurPsa, $groupeStat = null, $communauteCommune = null) {

        $q = Doctrine_Query::create()
                        ->select('c.cp_etablissement_secteur_id,count(c.id_utilisateur) as nb_equipe ')
                        ->from('Covoitureur c')
                        ->where('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                        ->andWhere('c.id_site_site = ?', sfConfig::get('sf_id_site_peugeot'))
                        ->andWhere('c.cp_etablissement_secteur_id != 0')
                        ->groupBy('c.cp_etablissement_secteur_id');

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $q->andWhere('c.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $q->andWhere('c.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {

            $i = 0;
            $requ = '';
            foreach ($groupeStat as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$q->andWhere('c.ville IN ? ', array($communauteCommune));
            $i = 0;
            $requ = '';
            foreach ($communauteCommune as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        $covoitureurEqPsas = $q->execute();

        $tabEqPsa = array();

        foreach ($covoitureurEqPsas as $covoitureurEqPsa) {
            //calcul du %
            if ($nbCovoitureurPsa != 0) {
                $nbPourCent = ($covoitureurEqPsa->getNbEquipe() * 100) / $nbCovoitureurPsa;
                $tabEqPsa[$covoitureurEqPsa->getCpEtablissementSecteur()->getCpEtablissementSecteurNom()] = $nbPourCent;
            } else {
                $tabEqPsa[$covoitureurEqPsa->getCpEtablissementSecteur()->getCpEtablissementSecteurNom()] = 0;
            }
        }

        return $tabEqPsa;
    }

    //répartition par horaire PSA
    public function getStatNbCovoitureurHorairePsa($dateDeb = null, $dateFin = null, $nbCovoitureurPsa, $groupeStat = null, $communauteCommune = null) {

        $q = Doctrine_Query::create()
                        ->select('c.cp_etablissement_horaire_id,count(c.id_utilisateur) as nb_horaire ')
                        ->from('Covoitureur c')
                        ->where('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                        ->andWhere('c.id_site_site = ?', sfConfig::get('sf_id_site_peugeot'))
                        ->andWhere('c.cp_etablissement_horaire_id != 0')
                        ->groupBy('c.cp_etablissement_horaire_id');

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $q->andWhere('c.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $q->andWhere('c.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {

            $i = 0;
            $requ = '';
            foreach ($groupeStat as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$q->andWhere('c.ville IN ? ', array($communauteCommune));
            $i = 0;
            $requ = '';
            foreach ($communauteCommune as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        $covoitureurHrPsas = $q->execute();

        $tabHrPsa = array();

        foreach ($covoitureurHrPsas as $covoitureurHrPsa) {
            //calcul du %
            if ($nbCovoitureurPsa != 0) {
                $nbPourCent = ($covoitureurHrPsa->getNbHoraire() * 100) / $nbCovoitureurPsa;
                $tabHrPsa[$covoitureurHrPsa->getCpEtablissementHoraire()->getCpEtablissementHoraireNom()] = $nbPourCent;
            } else {
                $tabHrPsa[$covoitureurHrPsa->getCpEtablissementHoraire()->getCpEtablissementHoraireNom()] = 0;
            }
        }

        return $tabHrPsa;
    }

    /*     * *********************************************************** */

    //répartition par  CSP
    public function getStatNbCovoitureurCsp($dateDeb = null, $dateFin = null, $nbCovoitureur, $etab = null, $groupeStat = null, $communauteCommune = null) {

        $q = Doctrine_Query::create()
                        ->select('c.id_csp,count(c.id_utilisateur) as nb_csp ')
                        ->from('Covoitureur c')
                        ->where('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                        ->andWhere('c.id_csp IS NOT NULL')
                        ->groupBy('c.id_csp')
        ;

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $q->andWhere('c.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $q->andWhere('c.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $q->andWhereIn('c.cp_etablissement_id', $etab);
            //$q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {

            $i = 0;
            $requ = '';
            foreach ($groupeStat as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$q->andWhere('c.ville IN ? ', array($communauteCommune));
            $i = 0;
            $requ = '';
            foreach ($communauteCommune as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        $covoitureurCsps = $q->execute();

        $tabCsp = array();

        foreach ($covoitureurCsps as $covoitureurCsp) {
            //calcul du %
            if ($nbCovoitureur != 0) {
                $nbPourCent = ($covoitureurCsp->getNbCsp() * 100) / $nbCovoitureur;
                $tabCsp[$covoitureurCsp->getCsp()->getIntitule()] = $nbPourCent;
            } else {
                $tabCsp[$covoitureurCsp->getCsp()->getIntitule()] = 0;
            }
        }

        return $tabCsp;
    }

    //répartition par fonctions
    public function getStatNbCovoitureurFct($dateDeb = null, $dateFin = null, $nbCovoitureur, $etab = null, $groupeStat = null, $communauteCommune = null) {

        $q = Doctrine_Query::create()
                        ->select('c.id_covoitureur_fonction,count(c.id_utilisateur) as nb_fct ')
                        ->from('Covoitureur c')
                        ->where('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                        ->andWhere('c.id_covoitureur_fonction != 0')
                        ->groupBy('c.id_covoitureur_fonction')
        ;

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $q->andWhere('c.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $q->andWhere('c.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $q->andWhereIn('c.cp_etablissement_id', $etab);
            //$q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {

            $i = 0;
            $requ = '';
            foreach ($groupeStat as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$q->andWhere('c.ville IN ? ', array($communauteCommune));
            $i = 0;
            $requ = '';
            foreach ($communauteCommune as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        $covoitureurFcts = $q->execute();

        $tabFct = array();

        foreach ($covoitureurFcts as $covoitureurFct) {
            //calcul du %
            if ($nbCovoitureur != 0) {
                $nbPourCent = ($covoitureurFct->getNbFct() * 100) / $nbCovoitureur;
                $tabFct[$covoitureurFct->getCovoitureurFonction()->getNom()] = $nbPourCent;
            } else {
                $tabFct[$covoitureurFct->getCovoitureurFonction()->getNom()] = 0;
            }
        }

        return $tabFct;
    }

    //répartition par connaissance de l'association
    public function getStatNbLienSite($dateDeb = null, $dateFin = null, $nbCovoitureur, $etab = null, $groupeStat = null, $communauteCommune = null) {

        $q = Doctrine_Query::create()
                        ->select('c.id_covoitureur_lien_site,count(c.id_utilisateur) as nb_lien_site ')
                        ->from('Covoitureur c')
                        ->where('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                        ->andWhere('c.id_covoitureur_lien_site != 0')
                        ->groupBy('c.id_covoitureur_lien_site')
        ;

        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $q->andWhere('c.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $q->andWhere('c.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $q->andWhereIn('c.cp_etablissement_id', $etab);
            //$q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {

            $i = 0;
            $requ = '';
            foreach ($groupeStat as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$q->andWhere('c.ville IN ? ', array($communauteCommune));
            $i = 0;
            $requ = '';
            foreach ($communauteCommune as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        $covoitureurLienSites = $q->execute();

        $tabLienSite = array();

        foreach ($covoitureurLienSites as $covoitureurLienSite) {
            //calcul du %
            if ($nbCovoitureur != 0) {
                $nbPourCent = ($covoitureurLienSite->getNbLienSite() * 100) / $nbCovoitureur;
                $tabLienSite[$covoitureurLienSite->getCovoitureurLienSite()->getNom()] = $nbPourCent;
            } else {
                $tabLienSite[$covoitureurLienSite->getCovoitureurLienSite()->getNom()] = 0;
            }
        }

        return $tabLienSite;
    }

    //répartition par tranche d'age
    //la tranche 2 doit etre supérieure à la tranche 1
    public function getStatCovoitureurTrancheAge($dateDeb = null, $dateFin = null, $tranche1 = null, $tranche2 = null, $nbCovoitureur = null, $etab = null, $groupeStat = null, $communauteCommune = null) {


        if (($tranche1 == 0 || $tranche1 == null ) && ($tranche2 == 0 || $tranche2 == null )) {
            return 0;
        } elseif (($tranche1 == 0 || $tranche1 == null)) {
            return 0;
        } elseif (($tranche2 == 0 || $tranche2 == null)) { //cas ou on donne la borne minimum
            $q = Doctrine_Query::create()
                            ->select('count(c.id_utilisateur) as nb_tr_ag ')
                            ->from('Covoitureur c')
                            ->where('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                            ->andWhere('c.date_naissance < DATE_SUB(NOW(), INTERVAL ? YEAR) ', $tranche1)
            ;
        } else { // cas de sélectioon entre les deux
            $q = Doctrine_Query::create()
                            ->select('count(c.id_utilisateur) as nb_tr_ag ')
                            ->from('Covoitureur c')
                            ->where('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                            ->andWhere('c.date_naissance BETWEEN DATE_SUB(NOW(), INTERVAL ? YEAR) AND DATE_SUB(NOW(), INTERVAL ? YEAR)', array($tranche2, $tranche1))
            ;
        }


        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $q->andWhere('c.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $q->andWhere('c.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $q->andWhereIn('c.cp_etablissement_id', $etab);
            //$q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {

            $i = 0;
            $requ = '';
            foreach ($groupeStat as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$q->andWhere('c.ville IN ? ', array($communauteCommune));
            $i = 0;
            $requ = '';
            foreach ($communauteCommune as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        $covoitureurTrAg = $q->fetchOne();

        if ($nbCovoitureur == 0 || $nbCovoitureur == null) {
            return 0;
        } else {
            return ($covoitureurTrAg['nb_tr_ag'] * 100) / $nbCovoitureur;
        }
    }

    //répartition par domiciliation
    public function getStatDomiciliation($dateDeb = null, $dateFin = null, $nbCovoitureur, $etab = null, $groupeStat = null, $communauteCommune = null) {

        $q = Doctrine_Query::create()
                        //->select('distinct(c.ville),count(*) as nb_domicile ')
                        ->select('c.ville,count(c.id_utilisateur) as nb_domicile ')
                        ->from('Covoitureur c')
                        ->where('c.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                        ->andWhere('(c.ville IS NOT NULL) AND c.ville != "" ')
                        ->groupBy('c.ville')
                        ->limit(sfConfig::get('app_stat_nb_domicile'))
                        ->orderBy('nb_domicile DESC')
        ;



        //gestion des parametres de filtre passé par le formulaire
        if ($dateDeb != null && $dateFin != null) {
            $q->andWhere('c.date_creation BETWEEN ? AND ?', array($dateDeb, $dateFin));
        } elseif ($dateDeb != null) {
            $q->andWhere('c.date_creation >= ? ', array($dateDeb));
        } elseif ($dateFin != null) {
            $q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les etablissement fournis
        if ($etab != null && count($etab) != 0) {
            $q->andWhereIn('c.cp_etablissement_id', $etab);
            //$q->andWhere('c.date_creation <= ? ', array($dateFin));
        }

        //liste dans les villes fournies (par groupe_stat)
        if ($groupeStat != null && count($groupeStat) != 0) {

            $i = 0;
            $requ = '';
            foreach ($groupeStat as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        //liste dans les villes fournies (par communaute de communes)
        if ($communauteCommune != null && count($communauteCommune) != 0) {
            //$q->andWhere('c.ville IN ? ', array($communauteCommune));
            $i = 0;
            $requ = '';
            foreach ($communauteCommune as $key => $ville) {
                $ville_new = $ville . '%';
                //$q->orWhere('c.ville LIKE ? ', $ville_new);
                if ($i == 0) {
                    $requ .= 'c.ville LIKE \'' . $ville_new . '\'';
                } else {
                    $requ .= ' OR c.ville LIKE  \'' . $ville_new . '\'';
                }
                $i++;
            }
            $q->andWhere($requ);
        }

        $covoitureurDomiciles = $q->execute();

        $tabDomicile = array();

        foreach ($covoitureurDomiciles as $covoitureurDomicile) {
            //calcul du %
            if ($nbCovoitureur != 0) {
                $nbPourCent = ($covoitureurDomicile->getNbDomicile() * 100) / $nbCovoitureur;
                $tabDomicile[$covoitureurDomicile->getVille()] = $nbPourCent;
            } else {
                $tabDomicile[$covoitureurDomicile->getVille()] = 0;
            }
        }

        return $tabDomicile;
    }

    /*
     * liste les covoitureurs à partir du nom fourni et du prénom
     */

    public function getNomPrenomCovoitureurSite($nom = null, $prenom = null) {

        $q = Doctrine_Query::create()
                        ->from('Covoitureur c');

        $q->where('c.id_site_client = ?', sfConfig::get('sf_id_site_client'));

        if ($nom != null && $nom != '') {
            $q->andWhere('c.nom = ?', $nom);
        }

        if ($prenom != null && $prenom != '') {
            $q->andWhere('c.prenom = ?', $prenom);
        }


        return $q->execute();
    }
    
    public function findCovoitureurByMail($mail) {

        $q = Doctrine_Query::create()
                        ->from('Covoitureur c');

        $q->where('c.id_site_client = ?', sfConfig::get('sf_id_site_client'));
        $q->andWhere('c.etat = 1');
        $q->andWhere('c.mail = ?', $mail);

        return $q->fetchOne();
    }

}