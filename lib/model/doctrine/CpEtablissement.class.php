<?php

/**
 * CpEtablissement
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    roulezmailn_v3
 * @subpackage model
 * @author     RoulezMalin
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class CpEtablissement extends BaseCpEtablissement
{
    public function __toString() {
        if($this->getCpEtablissementId() != 0){
            
            //verifie si est une raison social ou une société et adapte la valeur renvoyée
            if($this->getCpEtablissementTypeSociete()==1){
                $raisonSociale = $this->getCpEtablissementRaisonSocial()." (RS)";
                return $raisonSociale;
            }else{
                return $this->getCpEtablissementEtablissementNom();
            }
            
        }else{
            //return "Pas de Société";
           return sfConfig::get('app_libel_pas_societe');
        }
        
        //return $this->getCpEtablissementRaisonSocial();
    }
    
    public function getListeEtablissementLie() {

        $etablissementLie = Doctrine_Query::create()
                ->from('CpEtablissement cpe')
                ->where('cpe.cp_etablissement_etablissement_pere_id  = ?', $this->getCpEtablissementId())
                ->execute();

        return $etablissementLie;
    }

    /*
     * récupération du nombre d'inscrits lié à l'établissement
     * @return  string  $results    liste des etablissement avec id entre parenthese
     */
    public function getEtablissementNbInscrit() {

        /*
        $etablissementLie = Doctrine_Query::create()
                ->from('CpEtablissement cpe')
                ->where('cpe.cp_etablissement_etablissement_pere_id  = ?', $this->getCpEtablissementId())
                ->execute();

        return $etablissementLie;
         *
         */

        $qt = Doctrine_Query::create()
                ->select('COUNT(id_utilisateur) AS nb_inscrit')
                ->from('Covoitureur co')
                //->where('co.etat = 1 ')
                ->where('co.id_site_client = ?', sfConfig::get('sf_id_site_client'))
                ->andWhere('co.cp_etablissement_id = ?', $this->getCpEtablissementId())
        ;

        $inscrit = $qt->fetchArray();

        return $inscrit[0]['nb_inscrit'];
    }
    
    /*
     * récupération des enregistrements de etablissement
     * des lettres de départ
     * @param   int     $value     premieres lettre de l'etablissement 
     * @return  string  $results    liste des etablissement avec id entre parenthese
     */

    public function getEtablissementAutocomplete($value) {


        //récupération des enregistrements
        $etablissements = Doctrine_Query::create()
                ->select('ce.cp_etablissement_etablissement_nom')
                ->from('CpEtablissement ce')
                ->where('cp_etablissement_etablissement_nom like \'' . $value . '%\'')
                ->orWhere('cp_etablissement_etablissement_nom like \'%' . $value . '%\'')
                ->orderBy('cp_etablissement_etablissement_nom')
                ->limit('20')
                ->execute();

        $results = "";

        if ($etablissements->count() != 0) {

            foreach ($etablissements as $etablissement) {

                if($etablissement->getCpEtablissementEtablissementPereId() != null ){
                    $results .= $etablissement->getCpEtablissementEtablissementNom() ." (".$etablissement->getCpEtablissement()->getCpEtablissementRaisonSocial().")\r\n";
                }else{
                    $results .= $etablissement->getCpEtablissementEtablissementNom()." \r\n";
                }
            }
        }

       return $results;

    }

    /*
     * récupération des enregistrements de etablissement
     * des lettres de départ
     * @param   int     $value     premieres lettre de l'etablissement 
     * @return  string  $results    liste des etablissement avec id entre parenthese
     */

    public function getEtablissementAutocompleteCovoit($value) {

        $value1 = $value.'%' ;
        $value2 = '%'.$value.'%' ;
        
        //récupération des enregistrements
        $etablissements = Doctrine_Query::create()
                ->select('ce.cp_etablissement_etablissement_nom')
                ->from('CpEtablissement ce')
                ->leftJoin('ce.CpEtablissement rs')
                ->where('cp_etablissement_etablissement_nom like ?' , $value1)
                ->orWhere('cp_etablissement_etablissement_nom like ?' , $value2 )                
                ->orWhere('rs.cp_etablissement_raison_social like ?' , $value1)
                ->orWhere('rs.cp_etablissement_raison_social like ?' , $value2)
                ->orderBy('cp_etablissement_etablissement_nom')
                ->limit(sfConfig::get('app_max_etablissement_autcmp_list'))
                /*
                ->where('cp_etablissement_etablissement_nom like \'' . $value . '%\'')
                ->orWhere('cp_etablissement_etablissement_nom like \'%' . $value . '%\'')                
                ->orWhere('rs.cp_etablissement_raison_social like \'' . $value . '%\'')
                ->orWhere('rs.cp_etablissement_raison_social like \'%' . $value . '%\'')
                ->orderBy('cp_etablissement_etablissement_nom')
                 * 
                 */
                //;
               ->execute();

        $results = "";

        if ($etablissements->count() != 0) {

            foreach ($etablissements as $etablissement) {

                if($etablissement->getCpEtablissementEtablissementPereId() != null ){
                    $results .= $etablissement->getCpEtablissementEtablissementNom() ." (".$etablissement->getCpEtablissement()->getCpEtablissementRaisonSocial().")\r\n";
                }else{
                    $results .= $etablissement->getCpEtablissementEtablissementNom() ."\r\n";
                }
            }
        }

       return $results;
        //return $etablissements->getSqlQuery();

    }

     /*
     * récupération des enregistrements de Raison Sociale à partir
     * des lettres de départ
     * @param   int     $value     premieres lettre de la Raison Sociale
     * @return  string  $results    liste des Raisons Sociales 
     */

    public function getEtablissementAutocompleteRs($value) {

        //récupération des enregistrements
        $etablissements = Doctrine_Query::create()
                ->select('cp_etablissement_raison_social')
                ->from('CpEtablissement')
                ->where('cp_etablissement_raison_social like \'' . $value . '%\'')
                ->andWhere('cp_etablissement_type_societe = 1')
                ->orderBy('cp_etablissement_raison_social')
                ->execute();

        $results = "";

        if ($etablissements->count() != 0) {

            foreach ($etablissements as $etablissement) {

                    $results .= $etablissement->getCpEtablissementRaisonSocial() ."\r\n";

            }
        }

       return $results;

    }
    
    /*
     * récupération d'une liste etablissement apparatenant à une societe ou l'etablissement lui meme
     * à partir de l'id fourni
     * @param   int     $idEtab         cp_etablissement_id 
     * @return  array   $tab_results    tableau des id (si pas de valeur retourne null)
     */

    public function getListeEtablissementSociete($idEtab) {

        //récupération des enregistrements
        $etablissements = Doctrine_Query::create()
                ->select('cp_etablissement_id')
                ->from('CpEtablissement')
                ->where('cp_etablissement_id = ?', $idEtab)
                ->orWhere('cp_etablissement_etablissement_pere_id = ?', $idEtab)
                //->orderBy('cp_etablissement_etablissement_nom')
                ->execute();

        $tab_results = array();

        if ($etablissements->count() != 0) {

            foreach ($etablissements as $etablissement) {

                $tab_results[$etablissement->getCpEtablissementId()] = $etablissement->getCpEtablissementId();
            }
        }else{
            return $tab_results;
        }

       return $tab_results;

    }

     /*
     * récupération de la raison sociale d'un établissement
     *
     *
     * @return
     */

    public function getEtablissementRaisonSociale() {
        if(!is_null($this->getCpEtablissementEtablissementPereId())){
            return $this->getRSEtablissementRaisonSociale();
        }else{
            return " Pas de RS";
        }
        

    }
    
    /*
     * récupération du libelle de la raison sociale d'un établissement
     * qd celui ci est une rasison sociale
     *
     *
     * @return
     */

    public function getEtablissementLibelleRaisonSociale() {
        if(($this->getCpEtablissementTypeSociete() == 1)){
            return $this->getCpEtablissementRaisonSocial();
        }else{
            return " Pas de RS";
        }
        

    }
    
    /*
     * récupération de du nom de l'etablissement et dela raison sociale 
     *   (sert dans affichage combo box de creation de trajet)
     *
     *
     * @return
     */
    public function getNomEtablissementEtRaisonSociale() {
        //gestion de la RS
        $nomRs = '';
        if(!is_null($this->getCpEtablissementEtablissementPereId())){
            $nomRs = " (". $this->getCpEtablissementRaisonSocial().")";
        }else{
            $nomRs = '';
        }
        
        if($this->getCpEtablissementId() != 0){
            return $this->getCpEtablissementEtablissementNom().$nomRs;
        }else{
            //return "Pas de Société";
           return sfConfig::get('app_libel_pas_societe');
        }
        
        //return $this->getCpEtablissementRaisonSocial();
    }
    
    
    /*
     * récupération de du nom de l'etablissement, de la raison sociale et de l'id
     *   (sert dans affichage input text)
     *
     *
     * @return
     */
    public function getNomEtablissementRaisonSocialeId() {
        $results = "";
        
        if($this->getCpEtablissementEtablissementPereId() != null ){
            $results .= $this->getCpEtablissementEtablissementNom() ." (".$this->getCpEtablissement()->getCpEtablissementRaisonSocial().")\r\n";
        }else{
            $results .= $this->getCpEtablissementEtablissementNom() ."\r\n";
        }
        
   
        
        return $results ;
    }
    
    /*
     * récupération  du nom de la Raison Sociale de l'atablissement quand celui-ci est
     * lié à un établissement père
     *   (sert dans affichage input text)
     *
     *
     * @return
     */
    public function getRSEtablissementRaisonSociale() {
        
        if($this->getCpEtablissementEtablissementPereId() != null ){
            return $this->getCpEtablissement()->getCpEtablissementRaisonSocial() ;
        }else{
            return " Pas de RS";
        }
           
    }
    
}