<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Commune', 'dbrmv3');

/**
 * BaseCommune
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id_commune
 * @property string $art_maj
 * @property string $nom_commune
 * @property string $art_min
 * @property string $nom_commune2
 * @property integer $x
 * @property integer $y
 * @property integer $x_nom_decalage
 * @property integer $y_nom_decalage
 * @property float $latitude
 * @property float $longitude
 * @property integer $code_postal
 * @property integer $code_insee
 * @property string $departement
 * @property integer $departement_num
 * @property integer $region_num
 * @property integer $chef_lieu
 * @property Parking $Parking
 * @property Quartier $Quartier
 * @property Zone $Zone
 * @property ZoneIndustrielle $ZoneIndustrielle
 * 
 * @method integer          getIdCommune()        Returns the current record's "id_commune" value
 * @method string           getArtMaj()           Returns the current record's "art_maj" value
 * @method string           getNomCommune()       Returns the current record's "nom_commune" value
 * @method string           getArtMin()           Returns the current record's "art_min" value
 * @method string           getNomCommune2()      Returns the current record's "nom_commune2" value
 * @method integer          getX()                Returns the current record's "x" value
 * @method integer          getY()                Returns the current record's "y" value
 * @method integer          getXNomDecalage()     Returns the current record's "x_nom_decalage" value
 * @method integer          getYNomDecalage()     Returns the current record's "y_nom_decalage" value
 * @method float            getLatitude()         Returns the current record's "latitude" value
 * @method float            getLongitude()        Returns the current record's "longitude" value
 * @method integer          getCodePostal()       Returns the current record's "code_postal" value
 * @method integer          getCodeInsee()        Returns the current record's "code_insee" value
 * @method string           getDepartement()      Returns the current record's "departement" value
 * @method integer          getDepartementNum()   Returns the current record's "departement_num" value
 * @method integer          getRegionNum()        Returns the current record's "region_num" value
 * @method integer          getChefLieu()         Returns the current record's "chef_lieu" value
 * @method Parking          getParking()          Returns the current record's "Parking" value
 * @method Quartier         getQuartier()         Returns the current record's "Quartier" value
 * @method Zone             getZone()             Returns the current record's "Zone" value
 * @method ZoneIndustrielle getZoneIndustrielle() Returns the current record's "ZoneIndustrielle" value
 * @method Commune          setIdCommune()        Sets the current record's "id_commune" value
 * @method Commune          setArtMaj()           Sets the current record's "art_maj" value
 * @method Commune          setNomCommune()       Sets the current record's "nom_commune" value
 * @method Commune          setArtMin()           Sets the current record's "art_min" value
 * @method Commune          setNomCommune2()      Sets the current record's "nom_commune2" value
 * @method Commune          setX()                Sets the current record's "x" value
 * @method Commune          setY()                Sets the current record's "y" value
 * @method Commune          setXNomDecalage()     Sets the current record's "x_nom_decalage" value
 * @method Commune          setYNomDecalage()     Sets the current record's "y_nom_decalage" value
 * @method Commune          setLatitude()         Sets the current record's "latitude" value
 * @method Commune          setLongitude()        Sets the current record's "longitude" value
 * @method Commune          setCodePostal()       Sets the current record's "code_postal" value
 * @method Commune          setCodeInsee()        Sets the current record's "code_insee" value
 * @method Commune          setDepartement()      Sets the current record's "departement" value
 * @method Commune          setDepartementNum()   Sets the current record's "departement_num" value
 * @method Commune          setRegionNum()        Sets the current record's "region_num" value
 * @method Commune          setChefLieu()         Sets the current record's "chef_lieu" value
 * @method Commune          setParking()          Sets the current record's "Parking" value
 * @method Commune          setQuartier()         Sets the current record's "Quartier" value
 * @method Commune          setZone()             Sets the current record's "Zone" value
 * @method Commune          setZoneIndustrielle() Sets the current record's "ZoneIndustrielle" value
 * 
 * @package    roulezmailn_v3
 * @subpackage model
 * @author     RoulezMalin <technique@roulezmalin.fr>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseCommune extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('commune');
        $this->hasColumn('id_commune', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('art_maj', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('nom_commune', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('art_min', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('nom_commune2', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('x', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('y', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('x_nom_decalage', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('y_nom_decalage', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('latitude', 'float', 14, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 14,
             ));
        $this->hasColumn('longitude', 'float', 14, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 14,
             ));
        $this->hasColumn('code_postal', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('code_insee', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('departement', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('departement_num', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('region_num', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('chef_lieu', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Parking', array(
             'local' => 'id_commune',
             'foreign' => 'id_commune'));

        $this->hasOne('Quartier', array(
             'local' => 'id_commune',
             'foreign' => 'id_commune'));

        $this->hasOne('Zone', array(
             'local' => 'id_commune',
             'foreign' => 'id_commune'));

        $this->hasOne('ZoneIndustrielle', array(
             'local' => 'id_commune',
             'foreign' => 'id_commune'));
    }
}