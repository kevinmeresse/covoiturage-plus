<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Zone', 'dbrmv3');

/**
 * BaseZone
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id_zone
 * @property integer $id_commune
 * @property string $nom
 * @property string $ouvrage
 * @property string $superficie
 * @property string $superficie_occupee
 * @property string $desserte_routiere
 * @property integer $transport_urbain
 * @property integer $nombre_entreprise
 * @property string $vocation
 * @property integer $id_ville
 * @property Commune $Commune
 * @property VilleFr $VilleFr
 * @property Doctrine_Collection $CpEtablissement
 * 
 * @method integer             getIdZone()             Returns the current record's "id_zone" value
 * @method integer             getIdCommune()          Returns the current record's "id_commune" value
 * @method string              getNom()                Returns the current record's "nom" value
 * @method string              getOuvrage()            Returns the current record's "ouvrage" value
 * @method string              getSuperficie()         Returns the current record's "superficie" value
 * @method string              getSuperficieOccupee()  Returns the current record's "superficie_occupee" value
 * @method string              getDesserteRoutiere()   Returns the current record's "desserte_routiere" value
 * @method integer             getTransportUrbain()    Returns the current record's "transport_urbain" value
 * @method integer             getNombreEntreprise()   Returns the current record's "nombre_entreprise" value
 * @method string              getVocation()           Returns the current record's "vocation" value
 * @method integer             getIdVille()            Returns the current record's "id_ville" value
 * @method Commune             getCommune()            Returns the current record's "Commune" value
 * @method VilleFr             getVilleFr()            Returns the current record's "VilleFr" value
 * @method Doctrine_Collection getCpEtablissement()    Returns the current record's "CpEtablissement" collection
 * @method Zone                setIdZone()             Sets the current record's "id_zone" value
 * @method Zone                setIdCommune()          Sets the current record's "id_commune" value
 * @method Zone                setNom()                Sets the current record's "nom" value
 * @method Zone                setOuvrage()            Sets the current record's "ouvrage" value
 * @method Zone                setSuperficie()         Sets the current record's "superficie" value
 * @method Zone                setSuperficieOccupee()  Sets the current record's "superficie_occupee" value
 * @method Zone                setDesserteRoutiere()   Sets the current record's "desserte_routiere" value
 * @method Zone                setTransportUrbain()    Sets the current record's "transport_urbain" value
 * @method Zone                setNombreEntreprise()   Sets the current record's "nombre_entreprise" value
 * @method Zone                setVocation()           Sets the current record's "vocation" value
 * @method Zone                setIdVille()            Sets the current record's "id_ville" value
 * @method Zone                setCommune()            Sets the current record's "Commune" value
 * @method Zone                setVilleFr()            Sets the current record's "VilleFr" value
 * @method Zone                setCpEtablissement()    Sets the current record's "CpEtablissement" collection
 * 
 * @package    roulezmailn_v3
 * @subpackage model
 * @author     RoulezMalin <technique@roulezmalin.fr>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseZone extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('zone');
        $this->hasColumn('id_zone', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('id_commune', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('nom', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('ouvrage', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('superficie', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('superficie_occupee', 'string', 50, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 50,
             ));
        $this->hasColumn('desserte_routiere', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('transport_urbain', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('nombre_entreprise', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('vocation', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('id_ville', 'integer', 11, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'default' => '0',
             'primary' => false,
             'autoincrement' => false,
             'length' => 11,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Commune', array(
             'local' => 'id_commune',
             'foreign' => 'id_commune'));

        $this->hasOne('VilleFr', array(
             'local' => 'id_ville',
             'foreign' => 'id_ville'));

        $this->hasMany('CpEtablissement', array(
             'local' => 'id_ville',
             'foreign' => 'cp_etablissement_zone_id'));
    }
}