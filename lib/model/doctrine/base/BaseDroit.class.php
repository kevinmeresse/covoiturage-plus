<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Droit', 'dbrmv3');

/**
 * BaseDroit
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id_droit
 * @property string $rubrique_ajouter
 * @property string $rubrique_modifier
 * @property string $rubrique_supprimer
 * @property string $rubrique_position
 * @property string $page_ajouter
 * @property string $page_modifier
 * @property string $page_supprimer
 * @property string $page_position
 * @property integer $actualite
 * @property GroupeUtilisateur $GroupeUtilisateur
 * 
 * @method integer           getIdDroit()            Returns the current record's "id_droit" value
 * @method string            getRubriqueAjouter()    Returns the current record's "rubrique_ajouter" value
 * @method string            getRubriqueModifier()   Returns the current record's "rubrique_modifier" value
 * @method string            getRubriqueSupprimer()  Returns the current record's "rubrique_supprimer" value
 * @method string            getRubriquePosition()   Returns the current record's "rubrique_position" value
 * @method string            getPageAjouter()        Returns the current record's "page_ajouter" value
 * @method string            getPageModifier()       Returns the current record's "page_modifier" value
 * @method string            getPageSupprimer()      Returns the current record's "page_supprimer" value
 * @method string            getPagePosition()       Returns the current record's "page_position" value
 * @method integer           getActualite()          Returns the current record's "actualite" value
 * @method GroupeUtilisateur getGroupeUtilisateur()  Returns the current record's "GroupeUtilisateur" value
 * @method Droit             setIdDroit()            Sets the current record's "id_droit" value
 * @method Droit             setRubriqueAjouter()    Sets the current record's "rubrique_ajouter" value
 * @method Droit             setRubriqueModifier()   Sets the current record's "rubrique_modifier" value
 * @method Droit             setRubriqueSupprimer()  Sets the current record's "rubrique_supprimer" value
 * @method Droit             setRubriquePosition()   Sets the current record's "rubrique_position" value
 * @method Droit             setPageAjouter()        Sets the current record's "page_ajouter" value
 * @method Droit             setPageModifier()       Sets the current record's "page_modifier" value
 * @method Droit             setPageSupprimer()      Sets the current record's "page_supprimer" value
 * @method Droit             setPagePosition()       Sets the current record's "page_position" value
 * @method Droit             setActualite()          Sets the current record's "actualite" value
 * @method Droit             setGroupeUtilisateur()  Sets the current record's "GroupeUtilisateur" value
 * 
 * @package    roulezmailn_v3
 * @subpackage model
 * @author     RoulezMalin <technique@roulezmalin.fr>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseDroit extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('droit');
        $this->hasColumn('id_droit', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('rubrique_ajouter', 'string', 250, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 250,
             ));
        $this->hasColumn('rubrique_modifier', 'string', 250, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 250,
             ));
        $this->hasColumn('rubrique_supprimer', 'string', 250, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 250,
             ));
        $this->hasColumn('rubrique_position', 'string', 250, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 250,
             ));
        $this->hasColumn('page_ajouter', 'string', 250, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 250,
             ));
        $this->hasColumn('page_modifier', 'string', 250, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 250,
             ));
        $this->hasColumn('page_supprimer', 'string', 250, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 250,
             ));
        $this->hasColumn('page_position', 'string', 250, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 250,
             ));
        $this->hasColumn('actualite', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('GroupeUtilisateur', array(
             'local' => 'id_droit',
             'foreign' => 'id_droit'));
    }
}