<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Utilisateur', 'dbrmv3');

/**
 * BaseUtilisateur
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id_utilisateur
 * @property string $cle
 * @property integer $etat
 * @property timestamp $date_creation
 * @property string $identifiant
 * @property string $pass
 * @property string $nom
 * @property string $prenom
 * @property string $mail
 * @property integer $droit
 * @property string $fonction
 * @property timestamp $date_derniere_connexion
 * @property integer $nombre_connexion
 * @property integer $id_groupe_utilisateur
 * 
 * @method integer     getIdUtilisateur()           Returns the current record's "id_utilisateur" value
 * @method string      getCle()                     Returns the current record's "cle" value
 * @method integer     getEtat()                    Returns the current record's "etat" value
 * @method timestamp   getDateCreation()            Returns the current record's "date_creation" value
 * @method string      getIdentifiant()             Returns the current record's "identifiant" value
 * @method string      getPass()                    Returns the current record's "pass" value
 * @method string      getNom()                     Returns the current record's "nom" value
 * @method string      getPrenom()                  Returns the current record's "prenom" value
 * @method string      getMail()                    Returns the current record's "mail" value
 * @method integer     getDroit()                   Returns the current record's "droit" value
 * @method string      getFonction()                Returns the current record's "fonction" value
 * @method timestamp   getDateDerniereConnexion()   Returns the current record's "date_derniere_connexion" value
 * @method integer     getNombreConnexion()         Returns the current record's "nombre_connexion" value
 * @method integer     getIdGroupeUtilisateur()     Returns the current record's "id_groupe_utilisateur" value
 * @method Utilisateur setIdUtilisateur()           Sets the current record's "id_utilisateur" value
 * @method Utilisateur setCle()                     Sets the current record's "cle" value
 * @method Utilisateur setEtat()                    Sets the current record's "etat" value
 * @method Utilisateur setDateCreation()            Sets the current record's "date_creation" value
 * @method Utilisateur setIdentifiant()             Sets the current record's "identifiant" value
 * @method Utilisateur setPass()                    Sets the current record's "pass" value
 * @method Utilisateur setNom()                     Sets the current record's "nom" value
 * @method Utilisateur setPrenom()                  Sets the current record's "prenom" value
 * @method Utilisateur setMail()                    Sets the current record's "mail" value
 * @method Utilisateur setDroit()                   Sets the current record's "droit" value
 * @method Utilisateur setFonction()                Sets the current record's "fonction" value
 * @method Utilisateur setDateDerniereConnexion()   Sets the current record's "date_derniere_connexion" value
 * @method Utilisateur setNombreConnexion()         Sets the current record's "nombre_connexion" value
 * @method Utilisateur setIdGroupeUtilisateur()     Sets the current record's "id_groupe_utilisateur" value
 * 
 * @package    roulezmailn_v3
 * @subpackage model
 * @author     RoulezMalin <technique@roulezmalin.fr>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseUtilisateur extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('utilisateur');
        $this->hasColumn('id_utilisateur', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('cle', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('etat', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('date_creation', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0000-00-00 00:00:00',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('identifiant', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('pass', 'string', 20, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 20,
             ));
        $this->hasColumn('nom', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('prenom', 'string', 200, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 200,
             ));
        $this->hasColumn('mail', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('droit', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('fonction', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('date_derniere_connexion', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('nombre_connexion', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_groupe_utilisateur', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        
    }
}