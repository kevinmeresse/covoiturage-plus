<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('VilleFr', 'dbrmv3');

/**
 * BaseVilleFr
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id_ville
 * @property integer $id_pays
 * @property string $art_maj
 * @property string $nom_ville
 * @property string $art_min
 * @property string $nom_ville2
 * @property integer $x
 * @property integer $y
 * @property integer $x_nom_decalage
 * @property integer $y_nom_decalage
 * @property float $latitude
 * @property float $longitude
 * @property integer $code_postal
 * @property integer $code_insee
 * @property string $departement
 * @property integer $departement_num
 * @property integer $region_num
 * @property integer $chef_lieu
 * @property string $cle
 * @property integer $ma_plage
 * @property integer $pavillonbleu
 * @property integer $id_communaute
 * @property PaysMonde $PaysMonde
 * @property Doctrine_Collection $CpEtablissement
 * @property Doctrine_Collection $Zone
 * @property CommunauteCommune $CommunauteCommune
 * @property Doctrine_Collection $Equipage
 * @property Evenement $Evenement
 * @property Trajet $Trajet
 * @property VilleFrDistance $VilleFrDistance
 * 
 * @method integer             getIdVille()           Returns the current record's "id_ville" value
 * @method integer             getIdPays()            Returns the current record's "id_pays" value
 * @method string              getArtMaj()            Returns the current record's "art_maj" value
 * @method string              getNomVille()          Returns the current record's "nom_ville" value
 * @method string              getArtMin()            Returns the current record's "art_min" value
 * @method string              getNomVille2()         Returns the current record's "nom_ville2" value
 * @method integer             getX()                 Returns the current record's "x" value
 * @method integer             getY()                 Returns the current record's "y" value
 * @method integer             getXNomDecalage()      Returns the current record's "x_nom_decalage" value
 * @method integer             getYNomDecalage()      Returns the current record's "y_nom_decalage" value
 * @method float               getLatitude()          Returns the current record's "latitude" value
 * @method float               getLongitude()         Returns the current record's "longitude" value
 * @method integer             getCodePostal()        Returns the current record's "code_postal" value
 * @method integer             getCodeInsee()         Returns the current record's "code_insee" value
 * @method string              getDepartement()       Returns the current record's "departement" value
 * @method integer             getDepartementNum()    Returns the current record's "departement_num" value
 * @method integer             getRegionNum()         Returns the current record's "region_num" value
 * @method integer             getChefLieu()          Returns the current record's "chef_lieu" value
 * @method string              getCle()               Returns the current record's "cle" value
 * @method integer             getMaPlage()           Returns the current record's "ma_plage" value
 * @method integer             getPavillonbleu()      Returns the current record's "pavillonbleu" value
 * @method integer             getIdCommunaute()      Returns the current record's "id_communaute" value
 * @method PaysMonde           getPaysMonde()         Returns the current record's "PaysMonde" value
 * @method Doctrine_Collection getCpEtablissement()   Returns the current record's "CpEtablissement" collection
 * @method Doctrine_Collection getZone()              Returns the current record's "Zone" collection
 * @method CommunauteCommune   getCommunauteCommune() Returns the current record's "CommunauteCommune" value
 * @method Doctrine_Collection getEquipage()          Returns the current record's "Equipage" collection
 * @method Evenement           getEvenement()         Returns the current record's "Evenement" value
 * @method Trajet              getTrajet()            Returns the current record's "Trajet" value
 * @method VilleFrDistance     getVilleFrDistance()   Returns the current record's "VilleFrDistance" value
 * @method VilleFr             setIdVille()           Sets the current record's "id_ville" value
 * @method VilleFr             setIdPays()            Sets the current record's "id_pays" value
 * @method VilleFr             setArtMaj()            Sets the current record's "art_maj" value
 * @method VilleFr             setNomVille()          Sets the current record's "nom_ville" value
 * @method VilleFr             setArtMin()            Sets the current record's "art_min" value
 * @method VilleFr             setNomVille2()         Sets the current record's "nom_ville2" value
 * @method VilleFr             setX()                 Sets the current record's "x" value
 * @method VilleFr             setY()                 Sets the current record's "y" value
 * @method VilleFr             setXNomDecalage()      Sets the current record's "x_nom_decalage" value
 * @method VilleFr             setYNomDecalage()      Sets the current record's "y_nom_decalage" value
 * @method VilleFr             setLatitude()          Sets the current record's "latitude" value
 * @method VilleFr             setLongitude()         Sets the current record's "longitude" value
 * @method VilleFr             setCodePostal()        Sets the current record's "code_postal" value
 * @method VilleFr             setCodeInsee()         Sets the current record's "code_insee" value
 * @method VilleFr             setDepartement()       Sets the current record's "departement" value
 * @method VilleFr             setDepartementNum()    Sets the current record's "departement_num" value
 * @method VilleFr             setRegionNum()         Sets the current record's "region_num" value
 * @method VilleFr             setChefLieu()          Sets the current record's "chef_lieu" value
 * @method VilleFr             setCle()               Sets the current record's "cle" value
 * @method VilleFr             setMaPlage()           Sets the current record's "ma_plage" value
 * @method VilleFr             setPavillonbleu()      Sets the current record's "pavillonbleu" value
 * @method VilleFr             setIdCommunaute()      Sets the current record's "id_communaute" value
 * @method VilleFr             setPaysMonde()         Sets the current record's "PaysMonde" value
 * @method VilleFr             setCpEtablissement()   Sets the current record's "CpEtablissement" collection
 * @method VilleFr             setZone()              Sets the current record's "Zone" collection
 * @method VilleFr             setCommunauteCommune() Sets the current record's "CommunauteCommune" value
 * @method VilleFr             setEquipage()          Sets the current record's "Equipage" collection
 * @method VilleFr             setEvenement()         Sets the current record's "Evenement" value
 * @method VilleFr             setTrajet()            Sets the current record's "Trajet" value
 * @method VilleFr             setVilleFrDistance()   Sets the current record's "VilleFrDistance" value
 * 
 * @package    roulezmailn_v3
 * @subpackage model
 * @author     RoulezMalin <technique@roulezmalin.fr>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseVilleFr extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('ville_fr');
        $this->hasColumn('id_ville', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('id_pays', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '84',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('art_maj', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('nom_ville', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('art_min', 'string', 10, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 10,
             ));
        $this->hasColumn('nom_ville2', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('x', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('y', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('x_nom_decalage', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('y_nom_decalage', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('latitude', 'float', 14, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 14,
             ));
        $this->hasColumn('longitude', 'float', 14, array(
             'type' => 'float',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 14,
             ));
        $this->hasColumn('code_postal', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('code_insee', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('departement', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('departement_num', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('region_num', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('chef_lieu', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('cle', 'string', 100, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 100,
             ));
        $this->hasColumn('ma_plage', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('pavillonbleu', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'default' => '0',
             'notnull' => true,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('id_communaute', 'integer', 4, array(
             'type' => 'integer',
             'default' => '0',
             'notnull' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('PaysMonde', array(
             'local' => 'id_pays',
             'foreign' => 'id_pays'));

        $this->hasMany('CpEtablissement', array(
             'local' => 'id_ville',
             'foreign' => 'cp_etablissement_cp_etablissement_ville_id'));

        $this->hasMany('Zone', array(
             'local' => 'id_ville',
             'foreign' => 'id_ville'));

        $this->hasOne('CommunauteCommune', array(
             'local' => 'id_communaute',
             'foreign' => 'id_communaute'));

        $this->hasMany('Equipage', array(
             'local' => 'code_insee',
             'foreign' => 'id_ville_destination'));

        $this->hasOne('Evenement', array(
             'local' => 'code_insee',
             'foreign' => 'id_commune'));

        $this->hasOne('Trajet', array(
             'local' => 'code_insee',
             'foreign' => 'id_destination'));

        $this->hasOne('VilleFrDistance', array(
             'local' => 'id_ville',
             'foreign' => 'id_ville_elarg'));
    }
}