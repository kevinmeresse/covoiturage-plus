<?php
// Connection Component Binding
Doctrine_Manager::getInstance()->bindComponent('Evenement', 'dbrmv3');

/**
 * BaseEvenement
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id_evenement
 * @property integer $etat
 * @property timestamp $date_creation
 * @property timestamp $date_modification
 * @property date $date_publication
 * @property date $date_depublication
 * @property string $libelle
 * @property string $description
 * @property integer $id_commune
 * @property integer $id_site
 * @property VilleFr $VilleFr
 * @property SiteClient $SiteClient
 * 
 * @method integer    getIdEvenement()        Returns the current record's "id_evenement" value
 * @method integer    getEtat()               Returns the current record's "etat" value
 * @method timestamp  getDateCreation()       Returns the current record's "date_creation" value
 * @method timestamp  getDateModification()   Returns the current record's "date_modification" value
 * @method date       getDatePublication()    Returns the current record's "date_publication" value
 * @method date       getDateDepublication()  Returns the current record's "date_depublication" value
 * @method string     getLibelle()            Returns the current record's "libelle" value
 * @method string     getDescription()        Returns the current record's "description" value
 * @method integer    getIdCommune()          Returns the current record's "id_commune" value
 * @method integer    getIdSite()             Returns the current record's "id_site" value
 * @method VilleFr    getVilleFr()            Returns the current record's "VilleFr" value
 * @method SiteClient getSiteClient()         Returns the current record's "SiteClient" value
 * @method Evenement  setIdEvenement()        Sets the current record's "id_evenement" value
 * @method Evenement  setEtat()               Sets the current record's "etat" value
 * @method Evenement  setDateCreation()       Sets the current record's "date_creation" value
 * @method Evenement  setDateModification()   Sets the current record's "date_modification" value
 * @method Evenement  setDatePublication()    Sets the current record's "date_publication" value
 * @method Evenement  setDateDepublication()  Sets the current record's "date_depublication" value
 * @method Evenement  setLibelle()            Sets the current record's "libelle" value
 * @method Evenement  setDescription()        Sets the current record's "description" value
 * @method Evenement  setIdCommune()          Sets the current record's "id_commune" value
 * @method Evenement  setIdSite()             Sets the current record's "id_site" value
 * @method Evenement  setVilleFr()            Sets the current record's "VilleFr" value
 * @method Evenement  setSiteClient()         Sets the current record's "SiteClient" value
 * 
 * @package    roulezmailn_v3
 * @subpackage model
 * @author     RoulezMalin <technique@roulezmalin.fr>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseEvenement extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('evenement');
        $this->hasColumn('id_evenement', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             'length' => 4,
             ));
        $this->hasColumn('etat', 'integer', 1, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 1,
             ));
        $this->hasColumn('date_creation', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('date_modification', 'timestamp', 25, array(
             'type' => 'timestamp',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('date_publication', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('date_depublication', 'date', 25, array(
             'type' => 'date',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 25,
             ));
        $this->hasColumn('libelle', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('description', 'string', 255, array(
             'type' => 'string',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 255,
             ));
        $this->hasColumn('id_commune', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => false,
             'autoincrement' => false,
             'length' => 4,
             ));
        $this->hasColumn('id_site', 'integer', 4, array(
             'type' => 'integer',
             'fixed' => 0,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             'length' => 4,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('VilleFr', array(
             'local' => 'id_commune',
             'foreign' => 'code_insee'));

        $this->hasOne('SiteClient', array(
             'local' => 'id_site',
             'foreign' => 'id_site_client'));
    }
}